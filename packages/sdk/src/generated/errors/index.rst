packages/sdk/src/generated/errors/index.ts
==========================================

Last edited: 2023-06-14 20:00:41

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * Overflow: 'Overflow error'
 *
 * @category Errors
 * @category generated
 */
export class OverflowError extends Error {
  readonly code: number = 0x0;
  readonly name: string = 'Overflow';
  constructor() {
    super('Overflow error');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new OverflowError());
createErrorFromNameLookup.set('Overflow', () => new OverflowError());

/**
 * InvalidInstruction: 'Failed to build Migrate instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInstructionError extends Error {
  readonly code: number = 0x1;
  readonly name: string = 'InvalidInstruction';
  constructor() {
    super('Failed to build Migrate instruction');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInstructionError);
    }
  }
}

createErrorFromCodeLookup.set(0x1, () => new InvalidInstructionError());
createErrorFromNameLookup.set('InvalidInstruction', () => new InvalidInstructionError());

/**
 * NoRuleSet: 'No rule set provided'
 *
 * @category Errors
 * @category generated
 */
export class NoRuleSetError extends Error {
  readonly code: number = 0x2;
  readonly name: string = 'NoRuleSet';
  constructor() {
    super('No rule set provided');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoRuleSetError);
    }
  }
}

createErrorFromCodeLookup.set(0x2, () => new NoRuleSetError());
createErrorFromNameLookup.set('NoRuleSet', () => new NoRuleSetError());

/**
 * FeatureDisabled: 'This feature is currently disabled'
 *
 * @category Errors
 * @category generated
 */
export class FeatureDisabledError extends Error {
  readonly code: number = 0x3;
  readonly name: string = 'FeatureDisabled';
  constructor() {
    super('This feature is currently disabled');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FeatureDisabledError);
    }
  }
}

createErrorFromCodeLookup.set(0x3, () => new FeatureDisabledError());
createErrorFromNameLookup.set('FeatureDisabled', () => new FeatureDisabledError());

/**
 * InvalidUnlockMethod: 'Invalid unlock method'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUnlockMethodError extends Error {
  readonly code: number = 0x4;
  readonly name: string = 'InvalidUnlockMethod';
  constructor() {
    super('Invalid unlock method');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUnlockMethodError);
    }
  }
}

createErrorFromCodeLookup.set(0x4, () => new InvalidUnlockMethodError());
createErrorFromNameLookup.set('InvalidUnlockMethod', () => new InvalidUnlockMethodError());

/**
 * MigrationInProgress: 'Cannot perform this action while migration is in progress'
 *
 * @category Errors
 * @category generated
 */
export class MigrationInProgressError extends Error {
  readonly code: number = 0x5;
  readonly name: string = 'MigrationInProgress';
  constructor() {
    super('Cannot perform this action while migration is in progress');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MigrationInProgressError);
    }
  }
}

createErrorFromCodeLookup.set(0x5, () => new MigrationInProgressError());
createErrorFromNameLookup.set('MigrationInProgress', () => new MigrationInProgressError());

/**
 * MigrationAlreadyCompleted: 'Cannot be closed after migration has completed'
 *
 * @category Errors
 * @category generated
 */
export class MigrationAlreadyCompletedError extends Error {
  readonly code: number = 0x6;
  readonly name: string = 'MigrationAlreadyCompleted';
  constructor() {
    super('Cannot be closed after migration has completed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MigrationAlreadyCompletedError);
    }
  }
}

createErrorFromCodeLookup.set(0x6, () => new MigrationAlreadyCompletedError());
createErrorFromNameLookup.set(
  'MigrationAlreadyCompleted',
  () => new MigrationAlreadyCompletedError(),
);

/**
 * AlreadyInitialized: 'Program signer is already initialized'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyInitializedError extends Error {
  readonly code: number = 0x7;
  readonly name: string = 'AlreadyInitialized';
  constructor() {
    super('Program signer is already initialized');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyInitializedError);
    }
  }
}

createErrorFromCodeLookup.set(0x7, () => new AlreadyInitializedError());
createErrorFromNameLookup.set('AlreadyInitialized', () => new AlreadyInitializedError());

/**
 * MigrationLocked: 'Migration state account is locked'
 *
 * @category Errors
 * @category generated
 */
export class MigrationLockedError extends Error {
  readonly code: number = 0x8;
  readonly name: string = 'MigrationLocked';
  constructor() {
    super('Migration state account is locked');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MigrationLockedError);
    }
  }
}

createErrorFromCodeLookup.set(0x8, () => new MigrationLockedError());
createErrorFromNameLookup.set('MigrationLocked', () => new MigrationLockedError());

/**
 * ImmutableMetadata: 'Immutable metadata cannot be migrated'
 *
 * @category Errors
 * @category generated
 */
export class ImmutableMetadataError extends Error {
  readonly code: number = 0x9;
  readonly name: string = 'ImmutableMetadata';
  constructor() {
    super('Immutable metadata cannot be migrated');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ImmutableMetadataError);
    }
  }
}

createErrorFromCodeLookup.set(0x9, () => new ImmutableMetadataError());
createErrorFromNameLookup.set('ImmutableMetadata', () => new ImmutableMetadataError());

/**
 * IncorrectFreezeAuthority: 'Incorrect freeze authority'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectFreezeAuthorityError extends Error {
  readonly code: number = 0xa;
  readonly name: string = 'IncorrectFreezeAuthority';
  constructor() {
    super('Incorrect freeze authority');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectFreezeAuthorityError);
    }
  }
}

createErrorFromCodeLookup.set(0xa, () => new IncorrectFreezeAuthorityError());
createErrorFromNameLookup.set(
  'IncorrectFreezeAuthority',
  () => new IncorrectFreezeAuthorityError(),
);

/**
 * IncorrectTokenStandard: 'Incorrect token standard: must be NonFungible'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectTokenStandardError extends Error {
  readonly code: number = 0xb;
  readonly name: string = 'IncorrectTokenStandard';
  constructor() {
    super('Incorrect token standard: must be NonFungible');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectTokenStandardError);
    }
  }
}

createErrorFromCodeLookup.set(0xb, () => new IncorrectTokenStandardError());
createErrorFromNameLookup.set('IncorrectTokenStandard', () => new IncorrectTokenStandardError());

/**
 * ImmutableProgramOwner: 'Cannot migrate an item owned by an immutable program'
 *
 * @category Errors
 * @category generated
 */
export class ImmutableProgramOwnerError extends Error {
  readonly code: number = 0xc;
  readonly name: string = 'ImmutableProgramOwner';
  constructor() {
    super('Cannot migrate an item owned by an immutable program');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ImmutableProgramOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0xc, () => new ImmutableProgramOwnerError());
createErrorFromNameLookup.set('ImmutableProgramOwner', () => new ImmutableProgramOwnerError());

/**
 * MetadataMintMistmatch: 'Metadata does not match mint account'
 *
 * @category Errors
 * @category generated
 */
export class MetadataMintMistmatchError extends Error {
  readonly code: number = 0xd;
  readonly name: string = 'MetadataMintMistmatch';
  constructor() {
    super('Metadata does not match mint account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MetadataMintMistmatchError);
    }
  }
}

createErrorFromCodeLookup.set(0xd, () => new MetadataMintMistmatchError());
createErrorFromNameLookup.set('MetadataMintMistmatch', () => new MetadataMintMistmatchError());

/**
 * TokenMintMismatch: 'Token does not match the mint account'
 *
 * @category Errors
 * @category generated
 */
export class TokenMintMismatchError extends Error {
  readonly code: number = 0xe;
  readonly name: string = 'TokenMintMismatch';
  constructor() {
    super('Token does not match the mint account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenMintMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0xe, () => new TokenMintMismatchError());
createErrorFromNameLookup.set('TokenMintMismatch', () => new TokenMintMismatchError());

/**
 * CollectionMintMismatch: 'Collection mint does not match stored value'
 *
 * @category Errors
 * @category generated
 */
export class CollectionMintMismatchError extends Error {
  readonly code: number = 0xf;
  readonly name: string = 'CollectionMintMismatch';
  constructor() {
    super('Collection mint does not match stored value');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionMintMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0xf, () => new CollectionMintMismatchError());
createErrorFromNameLookup.set('CollectionMintMismatch', () => new CollectionMintMismatchError());

/**
 * InvalidAuthority: 'Authority does not match the authority on the account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x10;
  readonly name: string = 'InvalidAuthority';
  constructor() {
    super('Authority does not match the authority on the account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError);
    }
  }
}

createErrorFromCodeLookup.set(0x10, () => new InvalidAuthorityError());
createErrorFromNameLookup.set('InvalidAuthority', () => new InvalidAuthorityError());

/**
 * CollectionNotFound: 'No collection found on item'
 *
 * @category Errors
 * @category generated
 */
export class CollectionNotFoundError extends Error {
  readonly code: number = 0x11;
  readonly name: string = 'CollectionNotFound';
  constructor() {
    super('No collection found on item');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionNotFoundError);
    }
  }
}

createErrorFromCodeLookup.set(0x11, () => new CollectionNotFoundError());
createErrorFromNameLookup.set('CollectionNotFound', () => new CollectionNotFoundError());

/**
 * NotCollectionMember: 'Item is not a verified member of the collection'
 *
 * @category Errors
 * @category generated
 */
export class NotCollectionMemberError extends Error {
  readonly code: number = 0x12;
  readonly name: string = 'NotCollectionMember';
  constructor() {
    super('Item is not a verified member of the collection');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotCollectionMemberError);
    }
  }
}

createErrorFromCodeLookup.set(0x12, () => new NotCollectionMemberError());
createErrorFromNameLookup.set('NotCollectionMember', () => new NotCollectionMemberError());

/**
 * InvalidTokenStandard: 'Invalid token standard'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenStandardError extends Error {
  readonly code: number = 0x13;
  readonly name: string = 'InvalidTokenStandard';
  constructor() {
    super('Invalid token standard');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenStandardError);
    }
  }
}

createErrorFromCodeLookup.set(0x13, () => new InvalidTokenStandardError());
createErrorFromNameLookup.set('InvalidTokenStandard', () => new InvalidTokenStandardError());

/**
 * MissingTokenStandard: 'Missing token standard'
 *
 * @category Errors
 * @category generated
 */
export class MissingTokenStandardError extends Error {
  readonly code: number = 0x14;
  readonly name: string = 'MissingTokenStandard';
  constructor() {
    super('Missing token standard');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingTokenStandardError);
    }
  }
}

createErrorFromCodeLookup.set(0x14, () => new MissingTokenStandardError());
createErrorFromNameLookup.set('MissingTokenStandard', () => new MissingTokenStandardError());

/**
 * InvalidMetadataDerivation: 'The metadata derivation does not match the mint account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMetadataDerivationError extends Error {
  readonly code: number = 0x15;
  readonly name: string = 'InvalidMetadataDerivation';
  constructor() {
    super('The metadata derivation does not match the mint account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMetadataDerivationError);
    }
  }
}

createErrorFromCodeLookup.set(0x15, () => new InvalidMetadataDerivationError());
createErrorFromNameLookup.set(
  'InvalidMetadataDerivation',
  () => new InvalidMetadataDerivationError(),
);

/**
 * InvalidEditionDerivation: 'The edition derivation does not match the mint account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEditionDerivationError extends Error {
  readonly code: number = 0x16;
  readonly name: string = 'InvalidEditionDerivation';
  constructor() {
    super('The edition derivation does not match the mint account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidEditionDerivationError);
    }
  }
}

createErrorFromCodeLookup.set(0x16, () => new InvalidEditionDerivationError());
createErrorFromNameLookup.set(
  'InvalidEditionDerivation',
  () => new InvalidEditionDerivationError(),
);

/**
 * InvalidMigrationStateDerivation: 'Migration state account derivation is in correct'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMigrationStateDerivationError extends Error {
  readonly code: number = 0x17;
  readonly name: string = 'InvalidMigrationStateDerivation';
  constructor() {
    super('Migration state account derivation is in correct');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMigrationStateDerivationError);
    }
  }
}

createErrorFromCodeLookup.set(0x17, () => new InvalidMigrationStateDerivationError());
createErrorFromNameLookup.set(
  'InvalidMigrationStateDerivation',
  () => new InvalidMigrationStateDerivationError(),
);

/**
 * InvalidSignerDerivation: 'Program signer account derivation is incorrect'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignerDerivationError extends Error {
  readonly code: number = 0x18;
  readonly name: string = 'InvalidSignerDerivation';
  constructor() {
    super('Program signer account derivation is incorrect');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignerDerivationError);
    }
  }
}

createErrorFromCodeLookup.set(0x18, () => new InvalidSignerDerivationError());
createErrorFromNameLookup.set('InvalidSignerDerivation', () => new InvalidSignerDerivationError());

/**
 * InvalidDelegateRecordDerivation: 'Invalid delegate record derivation'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDelegateRecordDerivationError extends Error {
  readonly code: number = 0x19;
  readonly name: string = 'InvalidDelegateRecordDerivation';
  constructor() {
    super('Invalid delegate record derivation');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDelegateRecordDerivationError);
    }
  }
}

createErrorFromCodeLookup.set(0x19, () => new InvalidDelegateRecordDerivationError());
createErrorFromNameLookup.set(
  'InvalidDelegateRecordDerivation',
  () => new InvalidDelegateRecordDerivationError(),
);

/**
 * InvalidDelegate: 'Invalid delegate'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDelegateError extends Error {
  readonly code: number = 0x1a;
  readonly name: string = 'InvalidDelegate';
  constructor() {
    super('Invalid delegate');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDelegateError);
    }
  }
}

createErrorFromCodeLookup.set(0x1a, () => new InvalidDelegateError());
createErrorFromNameLookup.set('InvalidDelegate', () => new InvalidDelegateError());

/**
 * IncorrectMetadataProgramOwner: 'Incorrect program owner for metadata account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectMetadataProgramOwnerError extends Error {
  readonly code: number = 0x1b;
  readonly name: string = 'IncorrectMetadataProgramOwner';
  constructor() {
    super('Incorrect program owner for metadata account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectMetadataProgramOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1b, () => new IncorrectMetadataProgramOwnerError());
createErrorFromNameLookup.set(
  'IncorrectMetadataProgramOwner',
  () => new IncorrectMetadataProgramOwnerError(),
);

/**
 * IncorrectMintProgramOwner: 'Incorrect program owner for mint account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectMintProgramOwnerError extends Error {
  readonly code: number = 0x1c;
  readonly name: string = 'IncorrectMintProgramOwner';
  constructor() {
    super('Incorrect program owner for mint account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectMintProgramOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1c, () => new IncorrectMintProgramOwnerError());
createErrorFromNameLookup.set(
  'IncorrectMintProgramOwner',
  () => new IncorrectMintProgramOwnerError(),
);

/**
 * IncorrectMigrationStateProgramOwner: 'Incorrect program owner for migration state account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectMigrationStateProgramOwnerError extends Error {
  readonly code: number = 0x1d;
  readonly name: string = 'IncorrectMigrationStateProgramOwner';
  constructor() {
    super('Incorrect program owner for migration state account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectMigrationStateProgramOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1d, () => new IncorrectMigrationStateProgramOwnerError());
createErrorFromNameLookup.set(
  'IncorrectMigrationStateProgramOwner',
  () => new IncorrectMigrationStateProgramOwnerError(),
);

/**
 * IncorrectDelegateRecordProgramOwner: 'Incorrect program owner for delegate record account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectDelegateRecordProgramOwnerError extends Error {
  readonly code: number = 0x1e;
  readonly name: string = 'IncorrectDelegateRecordProgramOwner';
  constructor() {
    super('Incorrect program owner for delegate record account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectDelegateRecordProgramOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1e, () => new IncorrectDelegateRecordProgramOwnerError());
createErrorFromNameLookup.set(
  'IncorrectDelegateRecordProgramOwner',
  () => new IncorrectDelegateRecordProgramOwnerError(),
);

/**
 * TokenOwnerMismatch: 'Incorrect owner for SPL token account'
 *
 * @category Errors
 * @category generated
 */
export class TokenOwnerMismatchError extends Error {
  readonly code: number = 0x1f;
  readonly name: string = 'TokenOwnerMismatch';
  constructor() {
    super('Incorrect owner for SPL token account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenOwnerMismatchError);
    }
  }
}

createErrorFromCodeLookup.set(0x1f, () => new TokenOwnerMismatchError());
createErrorFromNameLookup.set('TokenOwnerMismatch', () => new TokenOwnerMismatchError());

/**
 * IncorrectTokenOwnerProgramOwner: 'Incorrect program owner for token owner account'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectTokenOwnerProgramOwnerError extends Error {
  readonly code: number = 0x20;
  readonly name: string = 'IncorrectTokenOwnerProgramOwner';
  constructor() {
    super('Incorrect program owner for token owner account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectTokenOwnerProgramOwnerError);
    }
  }
}

createErrorFromCodeLookup.set(0x20, () => new IncorrectTokenOwnerProgramOwnerError());
createErrorFromNameLookup.set(
  'IncorrectTokenOwnerProgramOwner',
  () => new IncorrectTokenOwnerProgramOwnerError(),
);

/**
 * IncorrectTokenOwnerProgramBuffer: 'Incorrect program owner for token owner account buffer'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectTokenOwnerProgramBufferError extends Error {
  readonly code: number = 0x21;
  readonly name: string = 'IncorrectTokenOwnerProgramBuffer';
  constructor() {
    super('Incorrect program owner for token owner account buffer');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectTokenOwnerProgramBufferError);
    }
  }
}

createErrorFromCodeLookup.set(0x21, () => new IncorrectTokenOwnerProgramBufferError());
createErrorFromNameLookup.set(
  'IncorrectTokenOwnerProgramBuffer',
  () => new IncorrectTokenOwnerProgramBufferError(),
);

/**
 * InvalidMetadata: 'Metadata did not deserialize correctly'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMetadataError extends Error {
  readonly code: number = 0x22;
  readonly name: string = 'InvalidMetadata';
  constructor() {
    super('Metadata did not deserialize correctly');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMetadataError);
    }
  }
}

createErrorFromCodeLookup.set(0x22, () => new InvalidMetadataError());
createErrorFromNameLookup.set('InvalidMetadata', () => new InvalidMetadataError());

/**
 * InvalidMigrationState: 'Migration state did not deserialize correctly'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMigrationStateError extends Error {
  readonly code: number = 0x23;
  readonly name: string = 'InvalidMigrationState';
  constructor() {
    super('Migration state did not deserialize correctly');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMigrationStateError);
    }
  }
}

createErrorFromCodeLookup.set(0x23, () => new InvalidMigrationStateError());
createErrorFromNameLookup.set('InvalidMigrationState', () => new InvalidMigrationStateError());

/**
 * EmptyMigrationState: 'Empty migration state account'
 *
 * @category Errors
 * @category generated
 */
export class EmptyMigrationStateError extends Error {
  readonly code: number = 0x24;
  readonly name: string = 'EmptyMigrationState';
  constructor() {
    super('Empty migration state account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptyMigrationStateError);
    }
  }
}

createErrorFromCodeLookup.set(0x24, () => new EmptyMigrationStateError());
createErrorFromNameLookup.set('EmptyMigrationState', () => new EmptyMigrationStateError());

/**
 * ZeroedMigrationState: 'Zeroed migration state account'
 *
 * @category Errors
 * @category generated
 */
export class ZeroedMigrationStateError extends Error {
  readonly code: number = 0x25;
  readonly name: string = 'ZeroedMigrationState';
  constructor() {
    super('Zeroed migration state account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ZeroedMigrationStateError);
    }
  }
}

createErrorFromCodeLookup.set(0x25, () => new ZeroedMigrationStateError());
createErrorFromNameLookup.set('ZeroedMigrationState', () => new ZeroedMigrationStateError());

/**
 * InvalidProgramSigner: 'Program signer did not deserialize correctly'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProgramSignerError extends Error {
  readonly code: number = 0x26;
  readonly name: string = 'InvalidProgramSigner';
  constructor() {
    super('Program signer did not deserialize correctly');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProgramSignerError);
    }
  }
}

createErrorFromCodeLookup.set(0x26, () => new InvalidProgramSignerError());
createErrorFromNameLookup.set('InvalidProgramSigner', () => new InvalidProgramSignerError());

/**
 * EmptyProgramSigner: 'Empty program signer account'
 *
 * @category Errors
 * @category generated
 */
export class EmptyProgramSignerError extends Error {
  readonly code: number = 0x27;
  readonly name: string = 'EmptyProgramSigner';
  constructor() {
    super('Empty program signer account');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptyProgramSignerError);
    }
  }
}

createErrorFromCodeLookup.set(0x27, () => new EmptyProgramSignerError());
createErrorFromNameLookup.set('EmptyProgramSigner', () => new EmptyProgramSignerError());

/**
 * InvalidUpgradeableLoaderState: 'Failed to deserialize UpgradeableLoaderState'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUpgradeableLoaderStateError extends Error {
  readonly code: number = 0x28;
  readonly name: string = 'InvalidUpgradeableLoaderState';
  constructor() {
    super('Failed to deserialize UpgradeableLoaderState');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUpgradeableLoaderStateError);
    }
  }
}

createErrorFromCodeLookup.set(0x28, () => new InvalidUpgradeableLoaderStateError());
createErrorFromNameLookup.set(
  'InvalidUpgradeableLoaderState',
  () => new InvalidUpgradeableLoaderStateError(),
);

/**
 * InvalidRuleSet: 'Authorization rules does not match the rule set stored on the state'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRuleSetError extends Error {
  readonly code: number = 0x29;
  readonly name: string = 'InvalidRuleSet';
  constructor() {
    super('Authorization rules does not match the rule set stored on the state');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRuleSetError);
    }
  }
}

createErrorFromCodeLookup.set(0x29, () => new InvalidRuleSetError());
createErrorFromNameLookup.set('InvalidRuleSet', () => new InvalidRuleSetError());

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}


