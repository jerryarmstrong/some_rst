fireball/js/src/generated/instructions/consumeIngredient.ts
===========================================================

Last edited: 2022-04-29 15:13:47

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ConsumeIngredient
 * @category generated
 */
export type ConsumeIngredientInstructionArgs = {
  ingredientBump: number;
  ingredientNum: beet.bignum;
};
/**
 * @category Instructions
 * @category ConsumeIngredient
 * @category generated
 */
const consumeIngredientStruct = new beet.BeetArgsStruct<
  ConsumeIngredientInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['ingredientBump', beet.u8],
    ['ingredientNum', beet.u64],
  ],
  'ConsumeIngredientInstructionArgs',
);
/**
 * Accounts required by the _consumeIngredient_ instruction
 * @category Instructions
 * @category ConsumeIngredient
 * @category generated
 */
export type ConsumeIngredientInstructionAccounts = {
  recipe: web3.PublicKey;
  dish: web3.PublicKey;
  ingredientMint: web3.PublicKey;
  ingredientStore: web3.PublicKey;
  payer: web3.PublicKey;
};

const consumeIngredientInstructionDiscriminator = [59, 14, 163, 19, 231, 151, 146, 94];

/**
 * Creates a _ConsumeIngredient_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ConsumeIngredient
 * @category generated
 */
export function createConsumeIngredientInstruction(
  accounts: ConsumeIngredientInstructionAccounts,
  args: ConsumeIngredientInstructionArgs,
) {
  const { recipe, dish, ingredientMint, ingredientStore, payer } = accounts;

  const [data] = consumeIngredientStruct.serialize({
    instructionDiscriminator: consumeIngredientInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: recipe,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: dish,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: ingredientMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: ingredientStore,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('fireo2tXc3j1Es8GjsGUf6whnEPte8oUvdDz4U2zN9n'),
    keys,
    data,
  });
  return ix;
}


