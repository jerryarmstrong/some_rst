fireball/js/src/generated/accounts/Dish.ts
==========================================

Last edited: 2022-04-29 15:13:47

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link Dish}
 * @category Accounts
 * @category generated
 */
export type DishArgs = {
  authority: web3.PublicKey;
  recipe: web3.PublicKey;
  ingredientsAdded: beet.bignum;
  completed: boolean;
};

const dishDiscriminator = [245, 85, 252, 118, 11, 40, 45, 254];
/**
 * Holds the data for the {@link Dish} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Dish implements DishArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly recipe: web3.PublicKey,
    readonly ingredientsAdded: beet.bignum,
    readonly completed: boolean,
  ) {}

  /**
   * Creates a {@link Dish} instance from the provided args.
   */
  static fromArgs(args: DishArgs) {
    return new Dish(args.authority, args.recipe, args.ingredientsAdded, args.completed);
  }

  /**
   * Deserializes the {@link Dish} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Dish, number] {
    return Dish.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Dish} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<Dish> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Dish account at ${address}`);
    }
    return Dish.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link Dish} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Dish, number] {
    return dishBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Dish} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return dishBeet.serialize({
      accountDiscriminator: dishDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Dish}
   */
  static get byteSize() {
    return dishBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Dish} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Dish.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Dish} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Dish.byteSize;
  }

  /**
   * Returns a readable version of {@link Dish} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      recipe: this.recipe.toBase58(),
      ingredientsAdded: this.ingredientsAdded,
      completed: this.completed,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const dishBeet = new beet.BeetStruct<
  Dish,
  DishArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['recipe', beetSolana.publicKey],
    ['ingredientsAdded', beet.u64],
    ['completed', beet.bool],
  ],
  Dish.fromArgs,
  'Dish',
);


