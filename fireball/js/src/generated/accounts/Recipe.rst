fireball/js/src/generated/accounts/Recipe.ts
============================================

Last edited: 2022-04-29 15:13:47

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as beet from '@metaplex-foundation/beet';

/**
 * Arguments used to create {@link Recipe}
 * @category Accounts
 * @category generated
 */
export type RecipeArgs = {
  authority: web3.PublicKey;
  ingredients: string;
  roots: number[] /* size: 32 */[];
};

const recipeDiscriminator = [10, 162, 156, 100, 56, 193, 205, 77];
/**
 * Holds the data for the {@link Recipe} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Recipe implements RecipeArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly ingredients: string,
    readonly roots: number[] /* size: 32 */[],
  ) {}

  /**
   * Creates a {@link Recipe} instance from the provided args.
   */
  static fromArgs(args: RecipeArgs) {
    return new Recipe(args.authority, args.ingredients, args.roots);
  }

  /**
   * Deserializes the {@link Recipe} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Recipe, number] {
    return Recipe.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Recipe} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<Recipe> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Recipe account at ${address}`);
    }
    return Recipe.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link Recipe} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Recipe, number] {
    return recipeBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Recipe} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return recipeBeet.serialize({
      accountDiscriminator: recipeDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Recipe} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RecipeArgs) {
    const instance = Recipe.fromArgs(args);
    return recipeBeet.toFixedFromValue({
      accountDiscriminator: recipeDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Recipe} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RecipeArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Recipe.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Recipe} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      ingredients: this.ingredients,
      roots: this.roots,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const recipeBeet = new beet.FixableBeetStruct<
  Recipe,
  RecipeArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['ingredients', beet.utf8String],
    ['roots', beet.array(beet.uniformFixedSizeArray(beet.u8, 32))],
  ],
  Recipe.fromArgs,
  'Recipe',
);


