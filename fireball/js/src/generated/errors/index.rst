fireball/js/src/generated/errors/index.ts
=========================================

Last edited: 2022-04-29 15:13:47

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * InvalidProof: 'Invalid Merkle proof'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProofError extends Error {
  readonly code: number = 0x1770;
  readonly name: string = 'InvalidProof';
  constructor() {
    super('Invalid Merkle proof');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProofError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidProofError());
createErrorFromNameLookup.set('InvalidProof', () => new InvalidProofError());

/**
 * InvalidMint: 'Invalid Mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
  readonly code: number = 0x1771;
  readonly name: string = 'InvalidMint';
  constructor() {
    super('Invalid Mint');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintError);
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidMintError());
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError());

/**
 * InvalidMintPDA: 'Invalid Mint PDA'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintPDAError extends Error {
  readonly code: number = 0x1772;
  readonly name: string = 'InvalidMintPDA';
  constructor() {
    super('Invalid Mint PDA');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintPDAError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidMintPDAError());
createErrorFromNameLookup.set('InvalidMintPDA', () => new InvalidMintPDAError());

/**
 * MismatchedRecipe: 'Mismatched Recipe'
 *
 * @category Errors
 * @category generated
 */
export class MismatchedRecipeError extends Error {
  readonly code: number = 0x1773;
  readonly name: string = 'MismatchedRecipe';
  constructor() {
    super('Mismatched Recipe');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MismatchedRecipeError);
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new MismatchedRecipeError());
createErrorFromNameLookup.set('MismatchedRecipe', () => new MismatchedRecipeError());

/**
 * IncompleteRecipe: 'Incomplete Recipe'
 *
 * @category Errors
 * @category generated
 */
export class IncompleteRecipeError extends Error {
  readonly code: number = 0x1774;
  readonly name: string = 'IncompleteRecipe';
  constructor() {
    super('Incomplete Recipe');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncompleteRecipeError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new IncompleteRecipeError());
createErrorFromNameLookup.set('IncompleteRecipe', () => new IncompleteRecipeError());

/**
 * RecipeAlreadyCompleted: 'Recipe Already Completed'
 *
 * @category Errors
 * @category generated
 */
export class RecipeAlreadyCompletedError extends Error {
  readonly code: number = 0x1775;
  readonly name: string = 'RecipeAlreadyCompleted';
  constructor() {
    super('Recipe Already Completed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RecipeAlreadyCompletedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new RecipeAlreadyCompletedError());
createErrorFromNameLookup.set('RecipeAlreadyCompleted', () => new RecipeAlreadyCompletedError());

/**
 * RecipeNotCompleted: 'Recipe Not Completed'
 *
 * @category Errors
 * @category generated
 */
export class RecipeNotCompletedError extends Error {
  readonly code: number = 0x1776;
  readonly name: string = 'RecipeNotCompleted';
  constructor() {
    super('Recipe Not Completed');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RecipeNotCompletedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new RecipeNotCompletedError());
createErrorFromNameLookup.set('RecipeNotCompleted', () => new RecipeNotCompletedError());

/**
 * InvalidAuthority: 'Invalid Authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1777;
  readonly name: string = 'InvalidAuthority';
  constructor() {
    super('Invalid Authority');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError);
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidAuthorityError());
createErrorFromNameLookup.set('InvalidAuthority', () => new InvalidAuthorityError());

/**
 * ArithmeticOverflow: 'Arithmetic Overflow'
 *
 * @category Errors
 * @category generated
 */
export class ArithmeticOverflowError extends Error {
  readonly code: number = 0x1778;
  readonly name: string = 'ArithmeticOverflow';
  constructor() {
    super('Arithmetic Overflow');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ArithmeticOverflowError);
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new ArithmeticOverflowError());
createErrorFromNameLookup.set('ArithmeticOverflow', () => new ArithmeticOverflowError());

/**
 * MismatchedEditionMint: 'Mismatched Edition Mint Parent'
 *
 * @category Errors
 * @category generated
 */
export class MismatchedEditionMintError extends Error {
  readonly code: number = 0x1779;
  readonly name: string = 'MismatchedEditionMint';
  constructor() {
    super('Mismatched Edition Mint Parent');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MismatchedEditionMintError);
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MismatchedEditionMintError());
createErrorFromNameLookup.set('MismatchedEditionMint', () => new MismatchedEditionMintError());

/**
 * EditionZeroInvalid: 'Edition Zero Invalid'
 *
 * @category Errors
 * @category generated
 */
export class EditionZeroInvalidError extends Error {
  readonly code: number = 0x177a;
  readonly name: string = 'EditionZeroInvalid';
  constructor() {
    super('Edition Zero Invalid');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EditionZeroInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new EditionZeroInvalidError());
createErrorFromNameLookup.set('EditionZeroInvalid', () => new EditionZeroInvalidError());

/**
 * DerivedKeyInvalid: 'Derived Key Invalid'
 *
 * @category Errors
 * @category generated
 */
export class DerivedKeyInvalidError extends Error {
  readonly code: number = 0x177b;
  readonly name: string = 'DerivedKeyInvalid';
  constructor() {
    super('Derived Key Invalid');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DerivedKeyInvalidError);
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new DerivedKeyInvalidError());
createErrorFromNameLookup.set('DerivedKeyInvalid', () => new DerivedKeyInvalidError());

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}


