clients/js/src/generated/accounts/token.ts
==========================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { TokenState, TokenStateArgs, getTokenStateSerializer } from '../types';

export type Token = Account<TokenAccountData>;

export type TokenAccountData = {
  mint: PublicKey;
  owner: PublicKey;
  amount: bigint;
  delegate: Option<PublicKey>;
  state: TokenState;
  isNative: Option<bigint>;
  delegatedAmount: bigint;
  closeAuthority: Option<PublicKey>;
};

export type TokenAccountDataArgs = {
  mint: PublicKey;
  owner: PublicKey;
  amount: number | bigint;
  delegate: OptionOrNullable<PublicKey>;
  state: TokenStateArgs;
  isNative: OptionOrNullable<number | bigint>;
  delegatedAmount: number | bigint;
  closeAuthority: OptionOrNullable<PublicKey>;
};

/** @deprecated Use `getTokenAccountDataSerializer()` without any argument instead. */
export function getTokenAccountDataSerializer(
  _context: object
): Serializer<TokenAccountDataArgs, TokenAccountData>;
export function getTokenAccountDataSerializer(): Serializer<
  TokenAccountDataArgs,
  TokenAccountData
>;
export function getTokenAccountDataSerializer(
  _context: object = {}
): Serializer<TokenAccountDataArgs, TokenAccountData> {
  return struct<TokenAccountData>(
    [
      ['mint', publicKeySerializer()],
      ['owner', publicKeySerializer()],
      ['amount', u64()],
      [
        'delegate',
        option(publicKeySerializer(), { prefix: u32(), fixed: true }),
      ],
      ['state', getTokenStateSerializer()],
      ['isNative', option(u64(), { prefix: u32(), fixed: true })],
      ['delegatedAmount', u64()],
      [
        'closeAuthority',
        option(publicKeySerializer(), { prefix: u32(), fixed: true }),
      ],
    ],
    { description: 'TokenAccountData' }
  ) as Serializer<TokenAccountDataArgs, TokenAccountData>;
}

/** @deprecated Use `deserializeToken(rawAccount)` without any context instead. */
export function deserializeToken(
  context: object,
  rawAccount: RpcAccount
): Token;
export function deserializeToken(rawAccount: RpcAccount): Token;
export function deserializeToken(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): Token {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getTokenAccountDataSerializer()
  );
}

export async function fetchToken(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Token> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Token');
  return deserializeToken(maybeAccount);
}

export async function safeFetchToken(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Token | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeToken(maybeAccount) : null;
}

export async function fetchAllToken(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Token[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Token');
    return deserializeToken(maybeAccount);
  });
}

export async function safeFetchAllToken(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Token[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeToken(maybeAccount as RpcAccount));
}

export function getTokenGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      mint: PublicKey;
      owner: PublicKey;
      amount: number | bigint;
      delegate: OptionOrNullable<PublicKey>;
      state: TokenStateArgs;
      isNative: OptionOrNullable<number | bigint>;
      delegatedAmount: number | bigint;
      closeAuthority: OptionOrNullable<PublicKey>;
    }>({
      mint: [0, publicKeySerializer()],
      owner: [32, publicKeySerializer()],
      amount: [64, u64()],
      delegate: [
        72,
        option(publicKeySerializer(), { prefix: u32(), fixed: true }),
      ],
      state: [108, getTokenStateSerializer()],
      isNative: [109, option(u64(), { prefix: u32(), fixed: true })],
      delegatedAmount: [121, u64()],
      closeAuthority: [
        129,
        option(publicKeySerializer(), { prefix: u32(), fixed: true }),
      ],
    })
    .deserializeUsing<Token>((account) => deserializeToken(account))
    .whereSize(165);
}

export function getTokenSize(): number {
  return 165;
}


