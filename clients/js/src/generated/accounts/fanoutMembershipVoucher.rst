clients/js/src/generated/accounts/fanoutMembershipVoucher.ts
============================================================

Last edited: 2023-06-19 18:36:17

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type FanoutMembershipVoucher =
  Account<FanoutMembershipVoucherAccountData>;

export type FanoutMembershipVoucherAccountData = {
  discriminator: Array<number>;
  fanout: PublicKey;
  totalInflow: bigint;
  lastInflow: bigint;
  bumpSeed: number;
  membershipKey: PublicKey;
  shares: bigint;
};

export type FanoutMembershipVoucherAccountDataArgs = {
  fanout: PublicKey;
  totalInflow: number | bigint;
  lastInflow: number | bigint;
  bumpSeed: number;
  membershipKey: PublicKey;
  shares: number | bigint;
};

/** @deprecated Use `getFanoutMembershipVoucherAccountDataSerializer()` without any argument instead. */
export function getFanoutMembershipVoucherAccountDataSerializer(
  _context: object
): Serializer<
  FanoutMembershipVoucherAccountDataArgs,
  FanoutMembershipVoucherAccountData
>;
export function getFanoutMembershipVoucherAccountDataSerializer(): Serializer<
  FanoutMembershipVoucherAccountDataArgs,
  FanoutMembershipVoucherAccountData
>;
export function getFanoutMembershipVoucherAccountDataSerializer(
  _context: object = {}
): Serializer<
  FanoutMembershipVoucherAccountDataArgs,
  FanoutMembershipVoucherAccountData
> {
  return mapSerializer<
    FanoutMembershipVoucherAccountDataArgs,
    any,
    FanoutMembershipVoucherAccountData
  >(
    struct<FanoutMembershipVoucherAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['fanout', publicKeySerializer()],
        ['totalInflow', u64()],
        ['lastInflow', u64()],
        ['bumpSeed', u8()],
        ['membershipKey', publicKeySerializer()],
        ['shares', u64()],
      ],
      { description: 'FanoutMembershipVoucherAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [185, 62, 74, 60, 105, 158, 178, 125],
    })
  ) as Serializer<
    FanoutMembershipVoucherAccountDataArgs,
    FanoutMembershipVoucherAccountData
  >;
}

/** @deprecated Use `deserializeFanoutMembershipVoucher(rawAccount)` without any context instead. */
export function deserializeFanoutMembershipVoucher(
  context: object,
  rawAccount: RpcAccount
): FanoutMembershipVoucher;
export function deserializeFanoutMembershipVoucher(
  rawAccount: RpcAccount
): FanoutMembershipVoucher;
export function deserializeFanoutMembershipVoucher(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): FanoutMembershipVoucher {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getFanoutMembershipVoucherAccountDataSerializer()
  );
}

export async function fetchFanoutMembershipVoucher(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipVoucher> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'FanoutMembershipVoucher');
  return deserializeFanoutMembershipVoucher(maybeAccount);
}

export async function safeFetchFanoutMembershipVoucher(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipVoucher | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeFanoutMembershipVoucher(maybeAccount)
    : null;
}

export async function fetchAllFanoutMembershipVoucher(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FanoutMembershipVoucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FanoutMembershipVoucher');
    return deserializeFanoutMembershipVoucher(maybeAccount);
  });
}

export async function safeFetchAllFanoutMembershipVoucher(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FanoutMembershipVoucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeFanoutMembershipVoucher(maybeAccount as RpcAccount)
    );
}

export function getFanoutMembershipVoucherGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      fanout: PublicKey;
      totalInflow: number | bigint;
      lastInflow: number | bigint;
      bumpSeed: number;
      membershipKey: PublicKey;
      shares: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      fanout: [8, publicKeySerializer()],
      totalInflow: [40, u64()],
      lastInflow: [48, u64()],
      bumpSeed: [56, u8()],
      membershipKey: [57, publicKeySerializer()],
      shares: [89, u64()],
    })
    .deserializeUsing<FanoutMembershipVoucher>((account) =>
      deserializeFanoutMembershipVoucher(account)
    )
    .whereField('discriminator', [185, 62, 74, 60, 105, 158, 178, 125]);
}

export function getFanoutMembershipVoucherSize(): number {
  return 153;
}

export function findFanoutMembershipVoucherPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the fanout account */
    fanout: PublicKey;
    /** The member's public key */
    member: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('fanout-membership'),
    publicKeySerializer().serialize(seeds.fanout),
    publicKeySerializer().serialize(seeds.member),
  ]);
}

export async function fetchFanoutMembershipVoucherFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFanoutMembershipVoucherPda>[1],
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipVoucher> {
  return fetchFanoutMembershipVoucher(
    context,
    findFanoutMembershipVoucherPda(context, seeds),
    options
  );
}

export async function safeFetchFanoutMembershipVoucherFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFanoutMembershipVoucherPda>[1],
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipVoucher | null> {
  return safeFetchFanoutMembershipVoucher(
    context,
    findFanoutMembershipVoucherPda(context, seeds),
    options
  );
}


