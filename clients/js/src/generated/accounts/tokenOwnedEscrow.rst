clients/js/src/generated/accounts/tokenOwnedEscrow.ts
=====================================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  EscrowAuthority,
  EscrowAuthorityArgs,
  Key,
  KeyArgs,
  getEscrowAuthoritySerializer,
  getKeySerializer,
} from '../types';

export type TokenOwnedEscrow = Account<TokenOwnedEscrowAccountData>;

export type TokenOwnedEscrowAccountData = {
  key: Key;
  baseToken: PublicKey;
  authority: EscrowAuthority;
  bump: number;
};

export type TokenOwnedEscrowAccountDataArgs = {
  baseToken: PublicKey;
  authority: EscrowAuthorityArgs;
  bump: number;
};

/** @deprecated Use `getTokenOwnedEscrowAccountDataSerializer()` without any argument instead. */
export function getTokenOwnedEscrowAccountDataSerializer(
  _context: object
): Serializer<TokenOwnedEscrowAccountDataArgs, TokenOwnedEscrowAccountData>;
export function getTokenOwnedEscrowAccountDataSerializer(): Serializer<
  TokenOwnedEscrowAccountDataArgs,
  TokenOwnedEscrowAccountData
>;
export function getTokenOwnedEscrowAccountDataSerializer(
  _context: object = {}
): Serializer<TokenOwnedEscrowAccountDataArgs, TokenOwnedEscrowAccountData> {
  return mapSerializer<
    TokenOwnedEscrowAccountDataArgs,
    any,
    TokenOwnedEscrowAccountData
  >(
    struct<TokenOwnedEscrowAccountData>(
      [
        ['key', getKeySerializer()],
        ['baseToken', publicKeySerializer()],
        ['authority', getEscrowAuthoritySerializer()],
        ['bump', u8()],
      ],
      { description: 'TokenOwnedEscrowAccountData' }
    ),
    (value) => ({ ...value, key: Key.TokenOwnedEscrow })
  ) as Serializer<TokenOwnedEscrowAccountDataArgs, TokenOwnedEscrowAccountData>;
}

/** @deprecated Use `deserializeTokenOwnedEscrow(rawAccount)` without any context instead. */
export function deserializeTokenOwnedEscrow(
  context: object,
  rawAccount: RpcAccount
): TokenOwnedEscrow;
export function deserializeTokenOwnedEscrow(
  rawAccount: RpcAccount
): TokenOwnedEscrow;
export function deserializeTokenOwnedEscrow(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): TokenOwnedEscrow {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getTokenOwnedEscrowAccountDataSerializer()
  );
}

export async function fetchTokenOwnedEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenOwnedEscrow> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TokenOwnedEscrow');
  return deserializeTokenOwnedEscrow(maybeAccount);
}

export async function safeFetchTokenOwnedEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenOwnedEscrow | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTokenOwnedEscrow(maybeAccount) : null;
}

export async function fetchAllTokenOwnedEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenOwnedEscrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenOwnedEscrow');
    return deserializeTokenOwnedEscrow(maybeAccount);
  });
}

export async function safeFetchAllTokenOwnedEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenOwnedEscrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeTokenOwnedEscrow(maybeAccount as RpcAccount)
    );
}

export function getTokenOwnedEscrowGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      baseToken: PublicKey;
      authority: EscrowAuthorityArgs;
      bump: number;
    }>({
      key: [0, getKeySerializer()],
      baseToken: [1, publicKeySerializer()],
      authority: [33, getEscrowAuthoritySerializer()],
      bump: [null, u8()],
    })
    .deserializeUsing<TokenOwnedEscrow>((account) =>
      deserializeTokenOwnedEscrow(account)
    )
    .whereField('key', Key.TokenOwnedEscrow);
}


