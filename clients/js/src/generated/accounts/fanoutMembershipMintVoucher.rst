clients/js/src/generated/accounts/fanoutMembershipMintVoucher.ts
================================================================

Last edited: 2023-06-19 18:36:17

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type FanoutMembershipMintVoucher =
  Account<FanoutMembershipMintVoucherAccountData>;

export type FanoutMembershipMintVoucherAccountData = {
  discriminator: Array<number>;
  fanout: PublicKey;
  fanoutMint: PublicKey;
  lastInflow: bigint;
  bumpSeed: number;
};

export type FanoutMembershipMintVoucherAccountDataArgs = {
  fanout: PublicKey;
  fanoutMint: PublicKey;
  lastInflow: number | bigint;
  bumpSeed: number;
};

/** @deprecated Use `getFanoutMembershipMintVoucherAccountDataSerializer()` without any argument instead. */
export function getFanoutMembershipMintVoucherAccountDataSerializer(
  _context: object
): Serializer<
  FanoutMembershipMintVoucherAccountDataArgs,
  FanoutMembershipMintVoucherAccountData
>;
export function getFanoutMembershipMintVoucherAccountDataSerializer(): Serializer<
  FanoutMembershipMintVoucherAccountDataArgs,
  FanoutMembershipMintVoucherAccountData
>;
export function getFanoutMembershipMintVoucherAccountDataSerializer(
  _context: object = {}
): Serializer<
  FanoutMembershipMintVoucherAccountDataArgs,
  FanoutMembershipMintVoucherAccountData
> {
  return mapSerializer<
    FanoutMembershipMintVoucherAccountDataArgs,
    any,
    FanoutMembershipMintVoucherAccountData
  >(
    struct<FanoutMembershipMintVoucherAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['fanout', publicKeySerializer()],
        ['fanoutMint', publicKeySerializer()],
        ['lastInflow', u64()],
        ['bumpSeed', u8()],
      ],
      { description: 'FanoutMembershipMintVoucherAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [185, 33, 118, 173, 147, 114, 126, 181],
    })
  ) as Serializer<
    FanoutMembershipMintVoucherAccountDataArgs,
    FanoutMembershipMintVoucherAccountData
  >;
}

/** @deprecated Use `deserializeFanoutMembershipMintVoucher(rawAccount)` without any context instead. */
export function deserializeFanoutMembershipMintVoucher(
  context: object,
  rawAccount: RpcAccount
): FanoutMembershipMintVoucher;
export function deserializeFanoutMembershipMintVoucher(
  rawAccount: RpcAccount
): FanoutMembershipMintVoucher;
export function deserializeFanoutMembershipMintVoucher(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): FanoutMembershipMintVoucher {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getFanoutMembershipMintVoucherAccountDataSerializer()
  );
}

export async function fetchFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipMintVoucher> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'FanoutMembershipMintVoucher');
  return deserializeFanoutMembershipMintVoucher(maybeAccount);
}

export async function safeFetchFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipMintVoucher | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeFanoutMembershipMintVoucher(maybeAccount)
    : null;
}

export async function fetchAllFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FanoutMembershipMintVoucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FanoutMembershipMintVoucher');
    return deserializeFanoutMembershipMintVoucher(maybeAccount);
  });
}

export async function safeFetchAllFanoutMembershipMintVoucher(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FanoutMembershipMintVoucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeFanoutMembershipMintVoucher(maybeAccount as RpcAccount)
    );
}

export function getFanoutMembershipMintVoucherGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      fanout: PublicKey;
      fanoutMint: PublicKey;
      lastInflow: number | bigint;
      bumpSeed: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      fanout: [8, publicKeySerializer()],
      fanoutMint: [40, publicKeySerializer()],
      lastInflow: [72, u64()],
      bumpSeed: [80, u8()],
    })
    .deserializeUsing<FanoutMembershipMintVoucher>((account) =>
      deserializeFanoutMembershipMintVoucher(account)
    )
    .whereField('discriminator', [185, 33, 118, 173, 147, 114, 126, 181]);
}

export function getFanoutMembershipMintVoucherSize(): number {
  return 105;
}

export function findFanoutMembershipMintVoucherPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the fanout account */
    fanout: PublicKey;
    /** The address of the membership account */
    membership: PublicKey;
    /** The address of the mint account */
    mint: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('fanout-membership'),
    publicKeySerializer().serialize(seeds.fanout),
    publicKeySerializer().serialize(seeds.membership),
    publicKeySerializer().serialize(seeds.mint),
  ]);
}

export async function fetchFanoutMembershipMintVoucherFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFanoutMembershipMintVoucherPda>[1],
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipMintVoucher> {
  return fetchFanoutMembershipMintVoucher(
    context,
    findFanoutMembershipMintVoucherPda(context, seeds),
    options
  );
}

export async function safeFetchFanoutMembershipMintVoucherFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFanoutMembershipMintVoucherPda>[1],
  options?: RpcGetAccountOptions
): Promise<FanoutMembershipMintVoucher | null> {
  return safeFetchFanoutMembershipMintVoucher(
    context,
    findFanoutMembershipMintVoucherPda(context, seeds),
    options
  );
}


