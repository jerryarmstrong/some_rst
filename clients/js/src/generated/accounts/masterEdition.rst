clients/js/src/generated/accounts/masterEdition.ts
==================================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs, getKeySerializer } from '../types';

export type MasterEdition = Account<MasterEditionAccountData>;

export type MasterEditionAccountData = {
  key: Key;
  supply: bigint;
  maxSupply: Option<bigint>;
};

export type MasterEditionAccountDataArgs = {
  supply: number | bigint;
  maxSupply: OptionOrNullable<number | bigint>;
};

/** @deprecated Use `getMasterEditionAccountDataSerializer()` without any argument instead. */
export function getMasterEditionAccountDataSerializer(
  _context: object
): Serializer<MasterEditionAccountDataArgs, MasterEditionAccountData>;
export function getMasterEditionAccountDataSerializer(): Serializer<
  MasterEditionAccountDataArgs,
  MasterEditionAccountData
>;
export function getMasterEditionAccountDataSerializer(
  _context: object = {}
): Serializer<MasterEditionAccountDataArgs, MasterEditionAccountData> {
  return mapSerializer<
    MasterEditionAccountDataArgs,
    any,
    MasterEditionAccountData
  >(
    struct<MasterEditionAccountData>(
      [
        ['key', getKeySerializer()],
        ['supply', u64()],
        ['maxSupply', option(u64())],
      ],
      { description: 'MasterEditionAccountData' }
    ),
    (value) => ({ ...value, key: Key.MasterEditionV2 })
  ) as Serializer<MasterEditionAccountDataArgs, MasterEditionAccountData>;
}

/** @deprecated Use `deserializeMasterEdition(rawAccount)` without any context instead. */
export function deserializeMasterEdition(
  context: object,
  rawAccount: RpcAccount
): MasterEdition;
export function deserializeMasterEdition(rawAccount: RpcAccount): MasterEdition;
export function deserializeMasterEdition(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): MasterEdition {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getMasterEditionAccountDataSerializer()
  );
}

export async function fetchMasterEdition(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterEdition> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MasterEdition');
  return deserializeMasterEdition(maybeAccount);
}

export async function safeFetchMasterEdition(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterEdition | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMasterEdition(maybeAccount) : null;
}

export async function fetchAllMasterEdition(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterEdition[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MasterEdition');
    return deserializeMasterEdition(maybeAccount);
  });
}

export async function safeFetchAllMasterEdition(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterEdition[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMasterEdition(maybeAccount as RpcAccount)
    );
}

export function getMasterEditionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: KeyArgs;
      supply: number | bigint;
      maxSupply: OptionOrNullable<number | bigint>;
    }>({
      key: [0, getKeySerializer()],
      supply: [1, u64()],
      maxSupply: [9, option(u64())],
    })
    .deserializeUsing<MasterEdition>((account) =>
      deserializeMasterEdition(account)
    )
    .whereField('key', Key.MasterEditionV2);
}

export function getMasterEditionSize(): number {
  return 282;
}

export function findMasterEditionPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the mint account */
    mint: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('metadata'),
    publicKeySerializer().serialize(programId),
    publicKeySerializer().serialize(seeds.mint),
    string({ size: 'variable' }).serialize('edition'),
  ]);
}

export async function fetchMasterEditionFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findMasterEditionPda>[1],
  options?: RpcGetAccountOptions
): Promise<MasterEdition> {
  return fetchMasterEdition(
    context,
    findMasterEditionPda(context, seeds),
    options
  );
}

export async function safeFetchMasterEditionFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findMasterEditionPda>[1],
  options?: RpcGetAccountOptions
): Promise<MasterEdition | null> {
  return safeFetchMasterEdition(
    context,
    findMasterEditionPda(context, seeds),
    options
  );
}


