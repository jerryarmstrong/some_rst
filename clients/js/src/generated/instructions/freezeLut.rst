clients/js/src/generated/instructions/freezeLut.ts
==================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type FreezeLutInstructionAccounts = {
  address: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type FreezeLutInstructionData = { discriminator: number };

export type FreezeLutInstructionDataArgs = {};

/** @deprecated Use `getFreezeLutInstructionDataSerializer()` without any argument instead. */
export function getFreezeLutInstructionDataSerializer(
  _context: object
): Serializer<FreezeLutInstructionDataArgs, FreezeLutInstructionData>;
export function getFreezeLutInstructionDataSerializer(): Serializer<
  FreezeLutInstructionDataArgs,
  FreezeLutInstructionData
>;
export function getFreezeLutInstructionDataSerializer(
  _context: object = {}
): Serializer<FreezeLutInstructionDataArgs, FreezeLutInstructionData> {
  return mapSerializer<
    FreezeLutInstructionDataArgs,
    any,
    FreezeLutInstructionData
  >(
    struct<FreezeLutInstructionData>([['discriminator', u32()]], {
      description: 'FreezeLutInstructionData',
    }),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<FreezeLutInstructionDataArgs, FreezeLutInstructionData>;
}

// Instruction.
export function freezeLut(
  context: Pick<Context, 'programs' | 'identity'>,
  input: FreezeLutInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splAddressLookupTable',
    'AddressLookupTab1e1111111111111111111111111'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    address: [input.address, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.address, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);

  // Data.
  const data = getFreezeLutInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


