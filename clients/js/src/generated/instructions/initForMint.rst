clients/js/src/generated/instructions/initForMint.ts
====================================================

Last edited: 2023-06-19 18:36:17

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type InitForMintInstructionAccounts = {
  authority?: Signer;
  fanout: PublicKey | Pda;
  fanoutForMint: PublicKey | Pda;
  mintHoldingAccount: PublicKey | Pda;
  mint: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type InitForMintInstructionData = {
  discriminator: Array<number>;
  bumpSeed: number;
};

export type InitForMintInstructionDataArgs = { bumpSeed: number };

/** @deprecated Use `getInitForMintInstructionDataSerializer()` without any argument instead. */
export function getInitForMintInstructionDataSerializer(
  _context: object
): Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData>;
export function getInitForMintInstructionDataSerializer(): Serializer<
  InitForMintInstructionDataArgs,
  InitForMintInstructionData
>;
export function getInitForMintInstructionDataSerializer(
  _context: object = {}
): Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData> {
  return mapSerializer<
    InitForMintInstructionDataArgs,
    any,
    InitForMintInstructionData
  >(
    struct<InitForMintInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['bumpSeed', u8()],
      ],
      { description: 'InitForMintInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [140, 150, 232, 195, 93, 219, 35, 170],
    })
  ) as Serializer<InitForMintInstructionDataArgs, InitForMintInstructionData>;
}

// Args.
export type InitForMintInstructionArgs = InitForMintInstructionDataArgs;

// Instruction.
export function initForMint(
  context: Pick<Context, 'programs' | 'identity'>,
  input: InitForMintInstructionAccounts & InitForMintInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    fanout: [input.fanout, true] as const,
    fanoutForMint: [input.fanoutForMint, true] as const,
    mintHoldingAccount: [input.mintHoldingAccount, true] as const,
    mint: [input.mint, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.fanout, false);
  addAccountMeta(keys, signers, resolvedAccounts.fanoutForMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.mintHoldingAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getInitForMintInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


