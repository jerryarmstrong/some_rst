clients/js/src/generated/instructions/verifyLeaf.ts
===================================================

Last edited: 2023-08-12 00:00:44

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type VerifyLeafInstructionAccounts = {
  merkleTree: PublicKey | Pda;
};

// Data.
export type VerifyLeafInstructionData = {
  discriminator: Array<number>;
  root: Uint8Array;
  leaf: Uint8Array;
  index: number;
};

export type VerifyLeafInstructionDataArgs = {
  root: Uint8Array;
  leaf: Uint8Array;
  index: number;
};

/** @deprecated Use `getVerifyLeafInstructionDataSerializer()` without any argument instead. */
export function getVerifyLeafInstructionDataSerializer(
  _context: object
): Serializer<VerifyLeafInstructionDataArgs, VerifyLeafInstructionData>;
export function getVerifyLeafInstructionDataSerializer(): Serializer<
  VerifyLeafInstructionDataArgs,
  VerifyLeafInstructionData
>;
export function getVerifyLeafInstructionDataSerializer(
  _context: object = {}
): Serializer<VerifyLeafInstructionDataArgs, VerifyLeafInstructionData> {
  return mapSerializer<
    VerifyLeafInstructionDataArgs,
    any,
    VerifyLeafInstructionData
  >(
    struct<VerifyLeafInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['root', bytes({ size: 32 })],
        ['leaf', bytes({ size: 32 })],
        ['index', u32()],
      ],
      { description: 'VerifyLeafInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [124, 220, 22, 223, 104, 10, 250, 224],
    })
  ) as Serializer<VerifyLeafInstructionDataArgs, VerifyLeafInstructionData>;
}

// Extra Args.
export type VerifyLeafInstructionExtraArgs = { proof: Array<PublicKey> };

// Args.
export type VerifyLeafInstructionArgs = PickPartial<
  VerifyLeafInstructionDataArgs & VerifyLeafInstructionExtraArgs,
  'proof'
>;

// Instruction.
export function verifyLeaf(
  context: Pick<Context, 'programs'>,
  input: VerifyLeafInstructionAccounts & VerifyLeafInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splAccountCompression',
    'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    merkleTree: [input.merkleTree, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(resolvingArgs, 'proof', input.proof ?? []);
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.merkleTree, false);

  // Remaining Accounts.
  const remainingAccounts = resolvedArgs.proof.map(
    (address) => [address, false] as const
  );
  remainingAccounts.forEach((remainingAccount) =>
    addAccountMeta(keys, signers, remainingAccount, false)
  );

  // Data.
  const data = getVerifyLeafInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


