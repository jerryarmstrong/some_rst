clients/js/src/generated/instructions/mint.ts
=============================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findCollectionAuthorityRecordPda,
  findMasterEditionPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  option,
  string,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyGuardPda, findCandyMachineAuthorityPda } from '../../hooked';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type MintInstructionAccounts = {
  candyGuard?: PublicKey | Pda;
  candyMachineProgram?: PublicKey | Pda;
  candyMachine: PublicKey | Pda;
  candyMachineAuthorityPda?: PublicKey | Pda;
  payer?: Signer;
  nftMetadata?: PublicKey | Pda;
  nftMint: PublicKey | Pda;
  nftMintAuthority?: Signer;
  nftMasterEdition?: PublicKey | Pda;
  collectionAuthorityRecord?: PublicKey | Pda;
  collectionMint: PublicKey | Pda;
  collectionMetadata?: PublicKey | Pda;
  collectionMasterEdition?: PublicKey | Pda;
  collectionUpdateAuthority: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  recentSlothashes?: PublicKey | Pda;
  instructionSysvarAccount?: PublicKey | Pda;
};

// Data.
export type MintInstructionData = {
  discriminator: Array<number>;
  mintArgs: Uint8Array;
  group: Option<string>;
};

export type MintInstructionDataArgs = {
  mintArgs: Uint8Array;
  group: OptionOrNullable<string>;
};

/** @deprecated Use `getMintInstructionDataSerializer()` without any argument instead. */
export function getMintInstructionDataSerializer(
  _context: object
): Serializer<MintInstructionDataArgs, MintInstructionData>;
export function getMintInstructionDataSerializer(): Serializer<
  MintInstructionDataArgs,
  MintInstructionData
>;
export function getMintInstructionDataSerializer(
  _context: object = {}
): Serializer<MintInstructionDataArgs, MintInstructionData> {
  return mapSerializer<MintInstructionDataArgs, any, MintInstructionData>(
    struct<MintInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['mintArgs', bytes({ size: u32() })],
        ['group', option(string())],
      ],
      { description: 'MintInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [51, 57, 225, 47, 182, 146, 137, 166],
    })
  ) as Serializer<MintInstructionDataArgs, MintInstructionData>;
}

// Args.
export type MintInstructionArgs = MintInstructionDataArgs;

// Instruction.
export function mint(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: MintInstructionAccounts & MintInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    nftMint: [input.nftMint, true] as const,
    collectionMint: [input.collectionMint, false] as const,
    collectionUpdateAuthority: [
      input.collectionUpdateAuthority,
      false,
    ] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'candyGuard',
    input.candyGuard
      ? ([input.candyGuard, false] as const)
      : ([
          findCandyGuardPda(context, {
            base: publicKey(input.candyMachine, false),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'candyMachineProgram',
    input.candyMachineProgram
      ? ([input.candyMachineProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplCandyMachine',
            'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'candyMachineAuthorityPda',
    input.candyMachineAuthorityPda
      ? ([input.candyMachineAuthorityPda, true] as const)
      : ([
          findCandyMachineAuthorityPda(context, {
            candyMachine: publicKey(input.candyMachine, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMetadata',
    input.nftMetadata
      ? ([input.nftMetadata, true] as const)
      : ([
          findMetadataPda(context, { mint: publicKey(input.nftMint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMintAuthority',
    input.nftMintAuthority
      ? ([input.nftMintAuthority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMasterEdition',
    input.nftMasterEdition
      ? ([input.nftMasterEdition, true] as const)
      : ([
          findMasterEditionPda(context, {
            mint: publicKey(input.nftMint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionAuthorityRecord',
    input.collectionAuthorityRecord
      ? ([input.collectionAuthorityRecord, false] as const)
      : ([
          findCollectionAuthorityRecordPda(context, {
            mint: publicKey(input.collectionMint, false),
            collectionAuthority: publicKey(
              resolvedAccounts.candyMachineAuthorityPda[0],
              false
            ),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionMetadata',
    input.collectionMetadata
      ? ([input.collectionMetadata, true] as const)
      : ([
          findMetadataPda(context, {
            mint: publicKey(input.collectionMint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionMasterEdition',
    input.collectionMasterEdition
      ? ([input.collectionMasterEdition, false] as const)
      : ([
          findMasterEditionPda(context, {
            mint: publicKey(input.collectionMint, false),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'recentSlothashes',
    input.recentSlothashes
      ? ([input.recentSlothashes, false] as const)
      : ([
          publicKey('SysvarS1otHashes111111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'instructionSysvarAccount',
    input.instructionSysvarAccount
      ? ([input.instructionSysvarAccount, false] as const)
      : ([
          publicKey('Sysvar1nstructions1111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.candyGuard, false);
  addAccountMeta(keys, signers, resolvedAccounts.candyMachineProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.candyMachineAuthorityPda,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMintAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMasterEdition, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionAuthorityRecord,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionMasterEdition,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionUpdateAuthority,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.recentSlothashes, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.instructionSysvarAccount,
    false
  );

  // Data.
  const data = getMintInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


