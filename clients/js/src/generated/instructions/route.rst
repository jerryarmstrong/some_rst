clients/js/src/generated/instructions/route.ts
==============================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  option,
  string,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyGuardPda } from '../../hooked';
import { addAccountMeta, addObjectProperty } from '../shared';
import { GuardType, GuardTypeArgs, getGuardTypeSerializer } from '../types';

// Accounts.
export type RouteInstructionAccounts = {
  candyGuard?: PublicKey | Pda;
  candyMachine: PublicKey | Pda;
  payer?: Signer;
};

// Data.
export type RouteInstructionData = {
  discriminator: Array<number>;
  /** The target guard type. */
  guard: GuardType;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  group: Option<string>;
};

export type RouteInstructionDataArgs = {
  /** The target guard type. */
  guard: GuardTypeArgs;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  group: OptionOrNullable<string>;
};

/** @deprecated Use `getRouteInstructionDataSerializer()` without any argument instead. */
export function getRouteInstructionDataSerializer(
  _context: object
): Serializer<RouteInstructionDataArgs, RouteInstructionData>;
export function getRouteInstructionDataSerializer(): Serializer<
  RouteInstructionDataArgs,
  RouteInstructionData
>;
export function getRouteInstructionDataSerializer(
  _context: object = {}
): Serializer<RouteInstructionDataArgs, RouteInstructionData> {
  return mapSerializer<RouteInstructionDataArgs, any, RouteInstructionData>(
    struct<RouteInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['guard', getGuardTypeSerializer()],
        ['data', bytes({ size: u32() })],
        ['group', option(string())],
      ],
      { description: 'RouteInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [229, 23, 203, 151, 122, 227, 173, 42],
    })
  ) as Serializer<RouteInstructionDataArgs, RouteInstructionData>;
}

// Args.
export type RouteInstructionArgs = RouteInstructionDataArgs;

// Instruction.
export function route(
  context: Pick<Context, 'programs' | 'eddsa' | 'payer'>,
  input: RouteInstructionAccounts & RouteInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'candyGuard',
    input.candyGuard
      ? ([input.candyGuard, false] as const)
      : ([
          findCandyGuardPda(context, {
            base: publicKey(input.candyMachine, false),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.candyGuard, false);
  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);

  // Data.
  const data = getRouteInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


