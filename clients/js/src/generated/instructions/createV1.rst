clients/js/src/generated/instructions/createV1.ts
=================================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Amount,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  mapAmountSerializer,
  none,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  resolveCollectionDetails,
  resolveCreateV1Bytes,
  resolveCreators,
  resolveDecimals,
  resolveMasterEdition,
  resolvePrintSupply,
} from '../../hooked';
import { findMetadataPda } from '../accounts';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';
import {
  Collection,
  CollectionArgs,
  CollectionDetails,
  CollectionDetailsArgs,
  Creator,
  CreatorArgs,
  PrintSupply,
  PrintSupplyArgs,
  TokenStandard,
  TokenStandardArgs,
  Uses,
  UsesArgs,
  getCollectionDetailsSerializer,
  getCollectionSerializer,
  getCreatorSerializer,
  getPrintSupplySerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '../types';

// Accounts.
export type CreateV1InstructionAccounts = {
  /** Unallocated metadata account with address as pda of ['metadata', program id, mint id] */
  metadata?: PublicKey | Pda;
  /** Unallocated edition account with address as pda of ['metadata', program id, mint, 'edition'] */
  masterEdition?: PublicKey | Pda;
  /** Mint of token asset */
  mint: PublicKey | Pda | Signer;
  /** Mint authority */
  authority?: Signer;
  /** Payer */
  payer?: Signer;
  /** Update authority for the metadata account */
  updateAuthority?: PublicKey | Pda | Signer;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Instructions sysvar account */
  sysvarInstructions?: PublicKey | Pda;
  /** SPL Token program */
  splTokenProgram?: PublicKey | Pda;
};

// Data.
export type CreateV1InstructionData = {
  discriminator: number;
  createV1Discriminator: number;
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: Amount<'%', 2>;
  creators: Option<Array<Creator>>;
  primarySaleHappened: boolean;
  isMutable: boolean;
  tokenStandard: TokenStandard;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  ruleSet: Option<PublicKey>;
  decimals: Option<number>;
  printSupply: Option<PrintSupply>;
};

export type CreateV1InstructionDataArgs = {
  name: string;
  symbol?: string;
  uri: string;
  sellerFeeBasisPoints: Amount<'%', 2>;
  creators: OptionOrNullable<Array<CreatorArgs>>;
  primarySaleHappened?: boolean;
  isMutable?: boolean;
  tokenStandard: TokenStandardArgs;
  collection?: OptionOrNullable<CollectionArgs>;
  uses?: OptionOrNullable<UsesArgs>;
  collectionDetails?: OptionOrNullable<CollectionDetailsArgs>;
  ruleSet?: OptionOrNullable<PublicKey>;
  decimals?: OptionOrNullable<number>;
  printSupply?: OptionOrNullable<PrintSupplyArgs>;
};

/** @deprecated Use `getCreateV1InstructionDataSerializer()` without any argument instead. */
export function getCreateV1InstructionDataSerializer(
  _context: object
): Serializer<CreateV1InstructionDataArgs, CreateV1InstructionData>;
export function getCreateV1InstructionDataSerializer(): Serializer<
  CreateV1InstructionDataArgs,
  CreateV1InstructionData
>;
export function getCreateV1InstructionDataSerializer(
  _context: object = {}
): Serializer<CreateV1InstructionDataArgs, CreateV1InstructionData> {
  return mapSerializer<
    CreateV1InstructionDataArgs,
    any,
    CreateV1InstructionData
  >(
    struct<CreateV1InstructionData>(
      [
        ['discriminator', u8()],
        ['createV1Discriminator', u8()],
        ['name', string()],
        ['symbol', string()],
        ['uri', string()],
        ['sellerFeeBasisPoints', mapAmountSerializer(u16(), '%', 2)],
        ['creators', option(array(getCreatorSerializer()))],
        ['primarySaleHappened', bool()],
        ['isMutable', bool()],
        ['tokenStandard', getTokenStandardSerializer()],
        ['collection', option(getCollectionSerializer())],
        ['uses', option(getUsesSerializer())],
        ['collectionDetails', option(getCollectionDetailsSerializer())],
        ['ruleSet', option(publicKeySerializer())],
        ['decimals', option(u8())],
        ['printSupply', option(getPrintSupplySerializer())],
      ],
      { description: 'CreateV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: 42,
      createV1Discriminator: 0,
      symbol: value.symbol ?? '',
      primarySaleHappened: value.primarySaleHappened ?? false,
      isMutable: value.isMutable ?? true,
      collection: value.collection ?? none(),
      uses: value.uses ?? none(),
      collectionDetails: value.collectionDetails ?? none(),
      ruleSet: value.ruleSet ?? none(),
      decimals: value.decimals ?? none(),
      printSupply: value.printSupply ?? none(),
    })
  ) as Serializer<CreateV1InstructionDataArgs, CreateV1InstructionData>;
}

// Extra Args.
export type CreateV1InstructionExtraArgs = { isCollection: boolean };

// Args.
export type CreateV1InstructionArgs = PickPartial<
  CreateV1InstructionDataArgs & CreateV1InstructionExtraArgs,
  | 'tokenStandard'
  | 'isCollection'
  | 'collectionDetails'
  | 'decimals'
  | 'printSupply'
  | 'creators'
>;

// Instruction.
export function createV1(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: CreateV1InstructionAccounts & CreateV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    mint: [input.mint, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'metadata',
    input.metadata
      ? ([input.metadata, true] as const)
      : ([
          findMetadataPda(context, { mint: publicKey(input.mint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'tokenStandard',
    input.tokenStandard ?? TokenStandard.NonFungible
  );
  addObjectProperty(
    resolvedAccounts,
    'masterEdition',
    input.masterEdition
      ? ([input.masterEdition, true] as const)
      : resolveMasterEdition(
          context,
          { ...input, ...resolvedAccounts },
          { ...input, ...resolvingArgs },
          programId,
          true
        )
  );
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'updateAuthority',
    input.updateAuthority
      ? ([input.updateAuthority, false] as const)
      : ([resolvedAccounts.authority[0], false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'sysvarInstructions',
    input.sysvarInstructions
      ? ([input.sysvarInstructions, false] as const)
      : ([
          publicKey('Sysvar1nstructions1111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'splTokenProgram',
    input.splTokenProgram
      ? ([input.splTokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(resolvingArgs, 'isCollection', input.isCollection ?? false);
  addObjectProperty(
    resolvingArgs,
    'collectionDetails',
    input.collectionDetails ??
      resolveCollectionDetails(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvingArgs,
    'decimals',
    input.decimals ??
      resolveDecimals(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvingArgs,
    'printSupply',
    input.printSupply ??
      resolvePrintSupply(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvingArgs,
    'creators',
    input.creators ??
      resolveCreators(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.masterEdition, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.updateAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.sysvarInstructions, false);
  addAccountMeta(keys, signers, resolvedAccounts.splTokenProgram, false);

  // Data.
  const data = getCreateV1InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = resolveCreateV1Bytes(
    context,
    resolvedAccounts,
    resolvedArgs,
    programId
  );

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


