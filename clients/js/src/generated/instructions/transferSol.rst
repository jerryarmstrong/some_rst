clients/js/src/generated/instructions/transferSol.ts
====================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  SolAmount,
  TransactionBuilder,
  mapAmountSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u32,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type TransferSolInstructionAccounts = {
  source?: Signer;
  destination: PublicKey | Pda;
};

// Data.
export type TransferSolInstructionData = {
  discriminator: number;
  amount: SolAmount;
};

export type TransferSolInstructionDataArgs = { amount: SolAmount };

/** @deprecated Use `getTransferSolInstructionDataSerializer()` without any argument instead. */
export function getTransferSolInstructionDataSerializer(
  _context: object
): Serializer<TransferSolInstructionDataArgs, TransferSolInstructionData>;
export function getTransferSolInstructionDataSerializer(): Serializer<
  TransferSolInstructionDataArgs,
  TransferSolInstructionData
>;
export function getTransferSolInstructionDataSerializer(
  _context: object = {}
): Serializer<TransferSolInstructionDataArgs, TransferSolInstructionData> {
  return mapSerializer<
    TransferSolInstructionDataArgs,
    any,
    TransferSolInstructionData
  >(
    struct<TransferSolInstructionData>(
      [
        ['discriminator', u32()],
        ['amount', mapAmountSerializer(u64(), 'SOL', 9)],
      ],
      { description: 'TransferSolInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 2 })
  ) as Serializer<TransferSolInstructionDataArgs, TransferSolInstructionData>;
}

// Args.
export type TransferSolInstructionArgs = TransferSolInstructionDataArgs;

// Instruction.
export function transferSol(
  context: Pick<Context, 'programs' | 'identity'>,
  input: TransferSolInstructionAccounts & TransferSolInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splSystem',
    '11111111111111111111111111111111'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    destination: [input.destination, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'source',
    input.source
      ? ([input.source, true] as const)
      : ([context.identity, true] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.source, false);
  addAccountMeta(keys, signers, resolvedAccounts.destination, false);

  // Data.
  const data =
    getTransferSolInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


