clients/js/src/generated/instructions/initializeMultisig2.ts
============================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta } from '../shared';

// Accounts.
export type InitializeMultisig2InstructionAccounts = {
  multisig: PublicKey | Pda;
  signer: PublicKey | Pda;
};

// Data.
export type InitializeMultisig2InstructionData = {
  discriminator: number;
  m: number;
};

export type InitializeMultisig2InstructionDataArgs = { m: number };

/** @deprecated Use `getInitializeMultisig2InstructionDataSerializer()` without any argument instead. */
export function getInitializeMultisig2InstructionDataSerializer(
  _context: object
): Serializer<
  InitializeMultisig2InstructionDataArgs,
  InitializeMultisig2InstructionData
>;
export function getInitializeMultisig2InstructionDataSerializer(): Serializer<
  InitializeMultisig2InstructionDataArgs,
  InitializeMultisig2InstructionData
>;
export function getInitializeMultisig2InstructionDataSerializer(
  _context: object = {}
): Serializer<
  InitializeMultisig2InstructionDataArgs,
  InitializeMultisig2InstructionData
> {
  return mapSerializer<
    InitializeMultisig2InstructionDataArgs,
    any,
    InitializeMultisig2InstructionData
  >(
    struct<InitializeMultisig2InstructionData>(
      [
        ['discriminator', u8()],
        ['m', u8()],
      ],
      { description: 'InitializeMultisig2InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 19 })
  ) as Serializer<
    InitializeMultisig2InstructionDataArgs,
    InitializeMultisig2InstructionData
  >;
}

// Args.
export type InitializeMultisig2InstructionArgs =
  InitializeMultisig2InstructionDataArgs;

// Instruction.
export function initializeMultisig2(
  context: Pick<Context, 'programs'>,
  input: InitializeMultisig2InstructionAccounts &
    InitializeMultisig2InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    multisig: [input.multisig, true] as const,
    signer: [input.signer, false] as const,
  };
  const resolvingArgs = {};
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.multisig, false);
  addAccountMeta(keys, signers, resolvedAccounts.signer, false);

  // Data.
  const data =
    getInitializeMultisig2InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


