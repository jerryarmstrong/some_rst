clients/js/src/generated/instructions/mintFromCandyMachine.ts
=============================================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findCollectionAuthorityRecordPda,
  findMasterEditionPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyMachineAuthorityPda } from '../../hooked';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type MintFromCandyMachineInstructionAccounts = {
  /** Candy machine account. */
  candyMachine: PublicKey | Pda;
  /**
   * Candy machine authority account. This is the account that holds a delegate
   * to verify an item into the collection.
   *
   */

  authorityPda?: PublicKey | Pda;
  /** Candy machine mint authority (mint only allowed for the mint_authority). */
  mintAuthority: Signer;
  /** Payer for the transaction and account allocation (rent). */
  payer?: Signer;
  /**
   * Mint account of the NFT. The account will be initialized if necessary.
   *
   */

  nftMint: PublicKey | Pda;
  /** Mint authority of the NFT. In most cases this will be the owner of the NFT. */
  nftMintAuthority?: Signer;
  /**
   * Metadata account of the NFT. This account must be uninitialized.
   *
   */

  nftMetadata?: PublicKey | Pda;
  /**
   * Master edition account of the NFT. The account will be initialized if necessary.
   *
   */

  nftMasterEdition?: PublicKey | Pda;
  /**
   * Collection authority record account is either the delegated authority record (legacy)
   * or a metadata delegate record for the `authority_pda`. The delegate is set when a new collection
   * is set to the candy machine.
   *
   */

  collectionAuthorityRecord?: PublicKey | Pda;
  /**
   * Mint account of the collection NFT.
   *
   */

  collectionMint: PublicKey | Pda;
  /**
   * Metadata account of the collection NFT.
   *
   */

  collectionMetadata?: PublicKey | Pda;
  /**
   * Master edition account of the collection NFT.
   *
   */

  collectionMasterEdition?: PublicKey | Pda;
  /**
   * Update authority of the collection NFT.
   *
   */

  collectionUpdateAuthority: PublicKey | Pda;
  /**
   * Token Metadata program.
   *
   */

  tokenMetadataProgram?: PublicKey | Pda;
  /** SPL Token program. */
  tokenProgram?: PublicKey | Pda;
  /** System program. */
  systemProgram?: PublicKey | Pda;
  /**
   * SlotHashes sysvar cluster data.
   *
   */

  recentSlothashes?: PublicKey | Pda;
};

// Data.
export type MintFromCandyMachineInstructionData = {
  discriminator: Array<number>;
};

export type MintFromCandyMachineInstructionDataArgs = {};

/** @deprecated Use `getMintFromCandyMachineInstructionDataSerializer()` without any argument instead. */
export function getMintFromCandyMachineInstructionDataSerializer(
  _context: object
): Serializer<
  MintFromCandyMachineInstructionDataArgs,
  MintFromCandyMachineInstructionData
>;
export function getMintFromCandyMachineInstructionDataSerializer(): Serializer<
  MintFromCandyMachineInstructionDataArgs,
  MintFromCandyMachineInstructionData
>;
export function getMintFromCandyMachineInstructionDataSerializer(
  _context: object = {}
): Serializer<
  MintFromCandyMachineInstructionDataArgs,
  MintFromCandyMachineInstructionData
> {
  return mapSerializer<
    MintFromCandyMachineInstructionDataArgs,
    any,
    MintFromCandyMachineInstructionData
  >(
    struct<MintFromCandyMachineInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'MintFromCandyMachineInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [51, 57, 225, 47, 182, 146, 137, 166],
    })
  ) as Serializer<
    MintFromCandyMachineInstructionDataArgs,
    MintFromCandyMachineInstructionData
  >;
}

// Instruction.
export function mintFromCandyMachine(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: MintFromCandyMachineInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    mintAuthority: [input.mintAuthority, false] as const,
    nftMint: [input.nftMint, true] as const,
    collectionMint: [input.collectionMint, false] as const,
    collectionUpdateAuthority: [
      input.collectionUpdateAuthority,
      false,
    ] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authorityPda',
    input.authorityPda
      ? ([input.authorityPda, true] as const)
      : ([
          findCandyMachineAuthorityPda(context, {
            candyMachine: publicKey(input.candyMachine, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMintAuthority',
    input.nftMintAuthority
      ? ([input.nftMintAuthority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMetadata',
    input.nftMetadata
      ? ([input.nftMetadata, true] as const)
      : ([
          findMetadataPda(context, { mint: publicKey(input.nftMint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'nftMasterEdition',
    input.nftMasterEdition
      ? ([input.nftMasterEdition, true] as const)
      : ([
          findMasterEditionPda(context, {
            mint: publicKey(input.nftMint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionAuthorityRecord',
    input.collectionAuthorityRecord
      ? ([input.collectionAuthorityRecord, false] as const)
      : ([
          findCollectionAuthorityRecordPda(context, {
            mint: publicKey(input.collectionMint, false),
            collectionAuthority: publicKey(
              resolvedAccounts.authorityPda[0],
              false
            ),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionMetadata',
    input.collectionMetadata
      ? ([input.collectionMetadata, true] as const)
      : ([
          findMetadataPda(context, {
            mint: publicKey(input.collectionMint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionMasterEdition',
    input.collectionMasterEdition
      ? ([input.collectionMasterEdition, false] as const)
      : ([
          findMasterEditionPda(context, {
            mint: publicKey(input.collectionMint, false),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'recentSlothashes',
    input.recentSlothashes
      ? ([input.recentSlothashes, false] as const)
      : ([
          publicKey('SysvarS1otHashes111111111111111111111111111'),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.authorityPda, false);
  addAccountMeta(keys, signers, resolvedAccounts.mintAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMintAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.nftMasterEdition, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionAuthorityRecord,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionMasterEdition,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionUpdateAuthority,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.recentSlothashes, false);

  // Data.
  const data = getMintFromCandyMachineInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


