clients/js/src/generated/instructions/createTreeConfig.ts
=========================================================

Last edited: 2023-08-12 00:00:44

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ACCOUNT_HEADER_SIZE,
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  none,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  option,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findTreeConfigPda, getTreeConfigSize } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type CreateTreeConfigInstructionAccounts = {
  treeConfig?: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  payer?: Signer;
  treeCreator?: Signer;
  logWrapper?: PublicKey | Pda;
  compressionProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateTreeConfigInstructionData = {
  discriminator: Array<number>;
  maxDepth: number;
  maxBufferSize: number;
  public: Option<boolean>;
};

export type CreateTreeConfigInstructionDataArgs = {
  maxDepth: number;
  maxBufferSize: number;
  public?: OptionOrNullable<boolean>;
};

/** @deprecated Use `getCreateTreeConfigInstructionDataSerializer()` without any argument instead. */
export function getCreateTreeConfigInstructionDataSerializer(
  _context: object
): Serializer<
  CreateTreeConfigInstructionDataArgs,
  CreateTreeConfigInstructionData
>;
export function getCreateTreeConfigInstructionDataSerializer(): Serializer<
  CreateTreeConfigInstructionDataArgs,
  CreateTreeConfigInstructionData
>;
export function getCreateTreeConfigInstructionDataSerializer(
  _context: object = {}
): Serializer<
  CreateTreeConfigInstructionDataArgs,
  CreateTreeConfigInstructionData
> {
  return mapSerializer<
    CreateTreeConfigInstructionDataArgs,
    any,
    CreateTreeConfigInstructionData
  >(
    struct<CreateTreeConfigInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['maxDepth', u32()],
        ['maxBufferSize', u32()],
        ['public', option(bool())],
      ],
      { description: 'CreateTreeConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [165, 83, 136, 142, 89, 202, 47, 220],
      public: value.public ?? none(),
    })
  ) as Serializer<
    CreateTreeConfigInstructionDataArgs,
    CreateTreeConfigInstructionData
  >;
}

// Args.
export type CreateTreeConfigInstructionArgs =
  CreateTreeConfigInstructionDataArgs;

// Instruction.
export function createTreeConfig(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: CreateTreeConfigInstructionAccounts & CreateTreeConfigInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    merkleTree: [input.merkleTree, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'treeConfig',
    input.treeConfig
      ? ([input.treeConfig, true] as const)
      : ([
          findTreeConfigPda(context, {
            merkleTree: publicKey(input.merkleTree, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'treeCreator',
    input.treeCreator
      ? ([input.treeCreator, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'logWrapper',
    input.logWrapper
      ? ([input.logWrapper, false] as const)
      : ([
          context.programs.getPublicKey(
            'splNoop',
            'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'compressionProgram',
    input.compressionProgram
      ? ([input.compressionProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splAccountCompression',
            'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.treeConfig, false);
  addAccountMeta(keys, signers, resolvedAccounts.merkleTree, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.treeCreator, false);
  addAccountMeta(keys, signers, resolvedAccounts.logWrapper, false);
  addAccountMeta(keys, signers, resolvedAccounts.compressionProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getCreateTreeConfigInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = getTreeConfigSize() + ACCOUNT_HEADER_SIZE;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


