clients/js/src/generated/errors/mplTokenExtras.ts
=================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidSystemProgram: Invalid System Program */
export class TokExInvalidSystemProgramError extends ProgramError {
  readonly name: string = 'InvalidSystemProgram';

  readonly code: number = 0x0; // 0

  constructor(program: Program, cause?: Error) {
    super('Invalid System Program', program, cause);
  }
}
codeToErrorMap.set(0x0, TokExInvalidSystemProgramError);
nameToErrorMap.set('InvalidSystemProgram', TokExInvalidSystemProgramError);

/** InvalidTokenProgram: Invalid Token Program */
export class TokExInvalidTokenProgramError extends ProgramError {
  readonly name: string = 'InvalidTokenProgram';

  readonly code: number = 0x1; // 1

  constructor(program: Program, cause?: Error) {
    super('Invalid Token Program', program, cause);
  }
}
codeToErrorMap.set(0x1, TokExInvalidTokenProgramError);
nameToErrorMap.set('InvalidTokenProgram', TokExInvalidTokenProgramError);

/** InvalidAssociatedTokenProgram: Invalid Associated Token Program */
export class TokExInvalidAssociatedTokenProgramError extends ProgramError {
  readonly name: string = 'InvalidAssociatedTokenProgram';

  readonly code: number = 0x2; // 2

  constructor(program: Program, cause?: Error) {
    super('Invalid Associated Token Program', program, cause);
  }
}
codeToErrorMap.set(0x2, TokExInvalidAssociatedTokenProgramError);
nameToErrorMap.set(
  'InvalidAssociatedTokenProgram',
  TokExInvalidAssociatedTokenProgramError
);

/** InvalidAssociatedTokenAccount: Invalid Associated Token Account: it should derive from the provided mint and owner */
export class TokExInvalidAssociatedTokenAccountError extends ProgramError {
  readonly name: string = 'InvalidAssociatedTokenAccount';

  readonly code: number = 0x3; // 3

  constructor(program: Program, cause?: Error) {
    super(
      'Invalid Associated Token Account: it should derive from the provided mint and owner',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x3, TokExInvalidAssociatedTokenAccountError);
nameToErrorMap.set(
  'InvalidAssociatedTokenAccount',
  TokExInvalidAssociatedTokenAccountError
);

/** InvalidProgramOwner: Invalid Program Owner */
export class TokExInvalidProgramOwnerError extends ProgramError {
  readonly name: string = 'InvalidProgramOwner';

  readonly code: number = 0x4; // 4

  constructor(program: Program, cause?: Error) {
    super('Invalid Program Owner', program, cause);
  }
}
codeToErrorMap.set(0x4, TokExInvalidProgramOwnerError);
nameToErrorMap.set('InvalidProgramOwner', TokExInvalidProgramOwnerError);

/** InvalidTokenMint: Invalid Token Mint: it should be the same as the provided mint account */
export class TokExInvalidTokenMintError extends ProgramError {
  readonly name: string = 'InvalidTokenMint';

  readonly code: number = 0x5; // 5

  constructor(program: Program, cause?: Error) {
    super(
      'Invalid Token Mint: it should be the same as the provided mint account',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x5, TokExInvalidTokenMintError);
nameToErrorMap.set('InvalidTokenMint', TokExInvalidTokenMintError);

/** InvalidTokenOwner: Invalid Program Owner: it should be the same as the provided owner account */
export class TokExInvalidTokenOwnerError extends ProgramError {
  readonly name: string = 'InvalidTokenOwner';

  readonly code: number = 0x6; // 6

  constructor(program: Program, cause?: Error) {
    super(
      'Invalid Program Owner: it should be the same as the provided owner account',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x6, TokExInvalidTokenOwnerError);
nameToErrorMap.set('InvalidTokenOwner', TokExInvalidTokenOwnerError);

/** CannotCreateNonAssociatedToken: Cannot create non-associated token accounts as they would need to sign the transaction. Please provide an associated token account instead */
export class TokExCannotCreateNonAssociatedTokenError extends ProgramError {
  readonly name: string = 'CannotCreateNonAssociatedToken';

  readonly code: number = 0x7; // 7

  constructor(program: Program, cause?: Error) {
    super(
      'Cannot create non-associated token accounts as they would need to sign the transaction. Please provide an associated token account instead',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x7, TokExCannotCreateNonAssociatedTokenError);
nameToErrorMap.set(
  'CannotCreateNonAssociatedToken',
  TokExCannotCreateNonAssociatedTokenError
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getMplTokenExtrasErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getMplTokenExtrasErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}


