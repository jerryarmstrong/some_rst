clients/js/src/generated/types/unlockArgs.ts
============================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, none } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  mapSerializer,
  option,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  AuthorizationData,
  AuthorizationDataArgs,
  getAuthorizationDataSerializer,
} from '.';

export type UnlockArgs = {
  __kind: 'V1';
  authorizationData: Option<AuthorizationData>;
};

export type UnlockArgsArgs = {
  __kind: 'V1';
  authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
};

/** @deprecated Use `getUnlockArgsSerializer()` without any argument instead. */
export function getUnlockArgsSerializer(
  _context: object
): Serializer<UnlockArgsArgs, UnlockArgs>;
export function getUnlockArgsSerializer(): Serializer<
  UnlockArgsArgs,
  UnlockArgs
>;
export function getUnlockArgsSerializer(
  _context: object = {}
): Serializer<UnlockArgsArgs, UnlockArgs> {
  return dataEnum<UnlockArgs>(
    [
      [
        'V1',
        mapSerializer<
          GetDataEnumKindContent<UnlockArgsArgs, 'V1'>,
          any,
          GetDataEnumKindContent<UnlockArgs, 'V1'>
        >(
          struct<GetDataEnumKindContent<UnlockArgs, 'V1'>>([
            ['authorizationData', option(getAuthorizationDataSerializer())],
          ]),
          (value) => ({
            ...value,
            authorizationData: value.authorizationData ?? none(),
          })
        ),
      ],
    ],
    { description: 'UnlockArgs' }
  ) as Serializer<UnlockArgsArgs, UnlockArgs>;
}

// Data Enum Helpers.
export function unlockArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<UnlockArgsArgs, 'V1'>
): GetDataEnumKind<UnlockArgsArgs, 'V1'>;
export function unlockArgs<K extends UnlockArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<UnlockArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isUnlockArgs<K extends UnlockArgs['__kind']>(
  kind: K,
  value: UnlockArgs
): value is UnlockArgs & { __kind: K } {
  return value.__kind === kind;
}


