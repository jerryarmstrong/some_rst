clients/js/src/generated/instructions/setCollectionV2.ts
========================================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  MetadataDelegateRole,
  findMasterEditionPda,
  findMetadataDelegateRecordPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findCandyMachineAuthorityPda } from '../../hooked';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetCollectionV2InstructionAccounts = {
  /** Candy Machine account. */
  candyMachine: PublicKey | Pda;
  /** Candy Machine authority. */
  authority?: Signer;
  /**
   * Authority PDA.
   *
   */

  authorityPda?: PublicKey | Pda;
  /** Payer of the transaction. */
  payer?: Signer;
  /**
   * Update authority of the collection.
   *
   */

  collectionUpdateAuthority: PublicKey | Pda;
  /**
   * Mint account of the collection.
   *
   */

  collectionMint: PublicKey | Pda;
  /**
   * Metadata account of the collection.
   *
   */

  collectionMetadata?: PublicKey | Pda;
  /**
   * Collection authority or metadata delegate record.
   *
   */

  collectionDelegateRecord?: PublicKey | Pda;
  /** Update authority of the new collection NFT. */
  newCollectionUpdateAuthority: Signer;
  /**
   * New collection mint.
   *
   */

  newCollectionMint: PublicKey | Pda;
  /**
   * New collection metadata.
   *
   */

  newCollectionMetadata?: PublicKey | Pda;
  /**
   * New collection master edition.
   *
   */

  newCollectionMasterEdition?: PublicKey | Pda;
  /**
   * New metadata delegate record.
   *
   */

  newCollectionDelegateRecord?: PublicKey | Pda;
  /**
   * Token Metadata program.
   *
   */

  tokenMetadataProgram?: PublicKey | Pda;
  /** System program. */
  systemProgram?: PublicKey | Pda;
  /**
   * Instructions sysvar account.
   *
   */

  sysvarInstructions?: PublicKey | Pda;
  /**
   * Token Authorization Rules program.
   *
   */

  authorizationRulesProgram?: PublicKey | Pda;
  /**
   * Token Authorization rules account for the collection metadata (if any).
   *
   */

  authorizationRules?: PublicKey | Pda;
};

// Data.
export type SetCollectionV2InstructionData = { discriminator: Array<number> };

export type SetCollectionV2InstructionDataArgs = {};

/** @deprecated Use `getSetCollectionV2InstructionDataSerializer()` without any argument instead. */
export function getSetCollectionV2InstructionDataSerializer(
  _context: object
): Serializer<
  SetCollectionV2InstructionDataArgs,
  SetCollectionV2InstructionData
>;
export function getSetCollectionV2InstructionDataSerializer(): Serializer<
  SetCollectionV2InstructionDataArgs,
  SetCollectionV2InstructionData
>;
export function getSetCollectionV2InstructionDataSerializer(
  _context: object = {}
): Serializer<
  SetCollectionV2InstructionDataArgs,
  SetCollectionV2InstructionData
> {
  return mapSerializer<
    SetCollectionV2InstructionDataArgs,
    any,
    SetCollectionV2InstructionData
  >(
    struct<SetCollectionV2InstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'SetCollectionV2InstructionData' }
    ),
    (value) => ({ ...value, discriminator: [229, 35, 61, 91, 15, 14, 99, 160] })
  ) as Serializer<
    SetCollectionV2InstructionDataArgs,
    SetCollectionV2InstructionData
  >;
}

// Instruction.
export function setCollectionV2(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: SetCollectionV2InstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    collectionUpdateAuthority: [
      input.collectionUpdateAuthority,
      false,
    ] as const,
    collectionMint: [input.collectionMint, false] as const,
    newCollectionUpdateAuthority: [
      input.newCollectionUpdateAuthority,
      false,
    ] as const,
    newCollectionMint: [input.newCollectionMint, false] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorityPda',
    input.authorityPda
      ? ([input.authorityPda, true] as const)
      : ([
          findCandyMachineAuthorityPda(context, {
            candyMachine: publicKey(input.candyMachine, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionMetadata',
    input.collectionMetadata
      ? ([input.collectionMetadata, true] as const)
      : ([
          findMetadataPda(context, {
            mint: publicKey(input.collectionMint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'collectionDelegateRecord',
    input.collectionDelegateRecord
      ? ([input.collectionDelegateRecord, true] as const)
      : ([
          findMetadataDelegateRecordPda(context, {
            mint: publicKey(input.collectionMint, false),
            delegateRole: MetadataDelegateRole.Collection,
            updateAuthority: publicKey(input.collectionUpdateAuthority, false),
            delegate: publicKey(resolvedAccounts.authorityPda[0], false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'newCollectionMetadata',
    input.newCollectionMetadata
      ? ([input.newCollectionMetadata, true] as const)
      : ([
          findMetadataPda(context, {
            mint: publicKey(input.newCollectionMint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'newCollectionMasterEdition',
    input.newCollectionMasterEdition
      ? ([input.newCollectionMasterEdition, false] as const)
      : ([
          findMasterEditionPda(context, {
            mint: publicKey(input.newCollectionMint, false),
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'newCollectionDelegateRecord',
    input.newCollectionDelegateRecord
      ? ([input.newCollectionDelegateRecord, true] as const)
      : ([
          findMetadataDelegateRecordPda(context, {
            mint: publicKey(input.newCollectionMint, false),
            delegateRole: MetadataDelegateRole.Collection,
            updateAuthority: publicKey(
              input.newCollectionUpdateAuthority,
              false
            ),
            delegate: publicKey(resolvedAccounts.authorityPda[0], false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'sysvarInstructions',
    input.sysvarInstructions
      ? ([input.sysvarInstructions, false] as const)
      : ([
          publicKey('Sysvar1nstructions1111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRulesProgram',
    input.authorizationRulesProgram
      ? ([input.authorizationRulesProgram, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRules',
    input.authorizationRules
      ? ([input.authorizationRules, false] as const)
      : ([programId, false] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.authorityPda, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionUpdateAuthority,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionDelegateRecord,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.newCollectionUpdateAuthority,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.newCollectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.newCollectionMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.newCollectionMasterEdition,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.newCollectionDelegateRecord,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.sysvarInstructions, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.authorizationRulesProgram,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.authorizationRules, false);

  // Data.
  const data = getSetCollectionV2InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


