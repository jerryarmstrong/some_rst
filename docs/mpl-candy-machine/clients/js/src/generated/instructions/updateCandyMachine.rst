clients/js/src/generated/instructions/updateCandyMachine.ts
===========================================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataSerializer,
} from '../types';

// Accounts.
export type UpdateCandyMachineInstructionAccounts = {
  /** Candy Machine account. */
  candyMachine: PublicKey | Pda;
  /** Authority of the candy machine. */
  authority?: Signer;
};

// Data.
export type UpdateCandyMachineInstructionData = {
  discriminator: Array<number>;
  data: CandyMachineData;
};

export type UpdateCandyMachineInstructionDataArgs = {
  data: CandyMachineDataArgs;
};

/** @deprecated Use `getUpdateCandyMachineInstructionDataSerializer()` without any argument instead. */
export function getUpdateCandyMachineInstructionDataSerializer(
  _context: object
): Serializer<
  UpdateCandyMachineInstructionDataArgs,
  UpdateCandyMachineInstructionData
>;
export function getUpdateCandyMachineInstructionDataSerializer(): Serializer<
  UpdateCandyMachineInstructionDataArgs,
  UpdateCandyMachineInstructionData
>;
export function getUpdateCandyMachineInstructionDataSerializer(
  _context: object = {}
): Serializer<
  UpdateCandyMachineInstructionDataArgs,
  UpdateCandyMachineInstructionData
> {
  return mapSerializer<
    UpdateCandyMachineInstructionDataArgs,
    any,
    UpdateCandyMachineInstructionData
  >(
    struct<UpdateCandyMachineInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['data', getCandyMachineDataSerializer()],
      ],
      { description: 'UpdateCandyMachineInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [219, 200, 88, 176, 158, 63, 253, 127],
    })
  ) as Serializer<
    UpdateCandyMachineInstructionDataArgs,
    UpdateCandyMachineInstructionData
  >;
}

// Args.
export type UpdateCandyMachineInstructionArgs =
  UpdateCandyMachineInstructionDataArgs;

// Instruction.
export function updateCandyMachine(
  context: Pick<Context, 'programs' | 'identity'>,
  input: UpdateCandyMachineInstructionAccounts &
    UpdateCandyMachineInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);

  // Data.
  const data =
    getUpdateCandyMachineInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


