clients/js/src/generated/accounts/freezeEscrow.ts
=================================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

/** PDA to store the frozen funds. */
export type FreezeEscrow = Account<FreezeEscrowAccountData>;

export type FreezeEscrowAccountData = {
  discriminator: Array<number>;
  /** Candy guard address associated with this escrow. */
  candyGuard: PublicKey;
  /** Candy machine address associated with this escrow. */
  candyMachine: PublicKey;
  /** Number of NFTs frozen. */
  frozenCount: bigint;
  /**
   * The timestamp of the first (frozen) mint. This is used to calculate
   * when the freeze period is over.
   */
  firstMintTime: Option<bigint>;
  /**
   * The amount of time (in seconds) for the freeze. The NFTs will be
   * allowed to thaw after this.
   */
  freezePeriod: bigint;
  /** The destination address for the frozen fund to go to. */
  destination: PublicKey;
  /**
   * The authority that initialized the freeze. This will be the only
   * address able to unlock the funds in case the candy guard account is
   * closed.
   */
  authority: PublicKey;
};

export type FreezeEscrowAccountDataArgs = {
  /** Candy guard address associated with this escrow. */
  candyGuard: PublicKey;
  /** Candy machine address associated with this escrow. */
  candyMachine: PublicKey;
  /** Number of NFTs frozen. */
  frozenCount: number | bigint;
  /**
   * The timestamp of the first (frozen) mint. This is used to calculate
   * when the freeze period is over.
   */
  firstMintTime: OptionOrNullable<number | bigint>;
  /**
   * The amount of time (in seconds) for the freeze. The NFTs will be
   * allowed to thaw after this.
   */
  freezePeriod: number | bigint;
  /** The destination address for the frozen fund to go to. */
  destination: PublicKey;
  /**
   * The authority that initialized the freeze. This will be the only
   * address able to unlock the funds in case the candy guard account is
   * closed.
   */
  authority: PublicKey;
};

/** @deprecated Use `getFreezeEscrowAccountDataSerializer()` without any argument instead. */
export function getFreezeEscrowAccountDataSerializer(
  _context: object
): Serializer<FreezeEscrowAccountDataArgs, FreezeEscrowAccountData>;
export function getFreezeEscrowAccountDataSerializer(): Serializer<
  FreezeEscrowAccountDataArgs,
  FreezeEscrowAccountData
>;
export function getFreezeEscrowAccountDataSerializer(
  _context: object = {}
): Serializer<FreezeEscrowAccountDataArgs, FreezeEscrowAccountData> {
  return mapSerializer<
    FreezeEscrowAccountDataArgs,
    any,
    FreezeEscrowAccountData
  >(
    struct<FreezeEscrowAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['candyGuard', publicKeySerializer()],
        ['candyMachine', publicKeySerializer()],
        ['frozenCount', u64()],
        ['firstMintTime', option(i64())],
        ['freezePeriod', i64()],
        ['destination', publicKeySerializer()],
        ['authority', publicKeySerializer()],
      ],
      { description: 'FreezeEscrowAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [227, 186, 40, 152, 7, 174, 131, 184],
    })
  ) as Serializer<FreezeEscrowAccountDataArgs, FreezeEscrowAccountData>;
}

/** @deprecated Use `deserializeFreezeEscrow(rawAccount)` without any context instead. */
export function deserializeFreezeEscrow(
  context: object,
  rawAccount: RpcAccount
): FreezeEscrow;
export function deserializeFreezeEscrow(rawAccount: RpcAccount): FreezeEscrow;
export function deserializeFreezeEscrow(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): FreezeEscrow {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getFreezeEscrowAccountDataSerializer()
  );
}

export async function fetchFreezeEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FreezeEscrow> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'FreezeEscrow');
  return deserializeFreezeEscrow(maybeAccount);
}

export async function safeFetchFreezeEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FreezeEscrow | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeFreezeEscrow(maybeAccount) : null;
}

export async function fetchAllFreezeEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FreezeEscrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FreezeEscrow');
    return deserializeFreezeEscrow(maybeAccount);
  });
}

export async function safeFetchAllFreezeEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FreezeEscrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeFreezeEscrow(maybeAccount as RpcAccount));
}

export function getFreezeEscrowGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      candyGuard: PublicKey;
      candyMachine: PublicKey;
      frozenCount: number | bigint;
      firstMintTime: OptionOrNullable<number | bigint>;
      freezePeriod: number | bigint;
      destination: PublicKey;
      authority: PublicKey;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      candyGuard: [8, publicKeySerializer()],
      candyMachine: [40, publicKeySerializer()],
      frozenCount: [72, u64()],
      firstMintTime: [80, option(i64())],
      freezePeriod: [null, i64()],
      destination: [null, publicKeySerializer()],
      authority: [null, publicKeySerializer()],
    })
    .deserializeUsing<FreezeEscrow>((account) =>
      deserializeFreezeEscrow(account)
    )
    .whereField('discriminator', [227, 186, 40, 152, 7, 174, 131, 184]);
}

export function findFreezeEscrowPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The wallet that will eventually receive the funds */
    destination: PublicKey;
    /** The address of the Candy Guard account */
    candyGuard: PublicKey;
    /** The address of the Candy Machine account */
    candyMachine: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplCandyGuard',
    'Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('freeze_escrow'),
    publicKeySerializer().serialize(seeds.destination),
    publicKeySerializer().serialize(seeds.candyGuard),
    publicKeySerializer().serialize(seeds.candyMachine),
  ]);
}

export async function fetchFreezeEscrowFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFreezeEscrowPda>[1],
  options?: RpcGetAccountOptions
): Promise<FreezeEscrow> {
  return fetchFreezeEscrow(
    context,
    findFreezeEscrowPda(context, seeds),
    options
  );
}

export async function safeFetchFreezeEscrowFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFreezeEscrowPda>[1],
  options?: RpcGetAccountOptions
): Promise<FreezeEscrow | null> {
  return safeFetchFreezeEscrow(
    context,
    findFreezeEscrowPda(context, seeds),
    options
  );
}


