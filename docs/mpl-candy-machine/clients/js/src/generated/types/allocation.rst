clients/js/src/generated/types/allocation.ts
============================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Serializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';

/**
 * Gaurd to specify the maximum number of mints in a guard set.
 *
 * List of accounts required:
 *
 * 0. `[writable]` Allocation tracker PDA. The PDA is derived
 * using the seed `["allocation", allocation id,
 * candy guard pubkey, candy machine pubkey]`.
 */

export type Allocation = {
  /** Unique identifier of the allocation. */
  id: number;
  /** The limit of the allocation. */
  limit: number;
};

export type AllocationArgs = Allocation;

/** @deprecated Use `getAllocationSerializer()` without any argument instead. */
export function getAllocationSerializer(
  _context: object
): Serializer<AllocationArgs, Allocation>;
export function getAllocationSerializer(): Serializer<
  AllocationArgs,
  Allocation
>;
export function getAllocationSerializer(
  _context: object = {}
): Serializer<AllocationArgs, Allocation> {
  return struct<Allocation>(
    [
      ['id', u8()],
      ['limit', u32()],
    ],
    { description: 'Allocation' }
  ) as Serializer<AllocationArgs, Allocation>;
}


