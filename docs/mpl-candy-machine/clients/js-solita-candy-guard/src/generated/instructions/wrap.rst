clients/js-solita-candy-guard/src/generated/instructions/wrap.ts
================================================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Wrap
 * @category generated
 */
export const wrapStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>([['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]], 'WrapInstructionArgs');
/**
 * Accounts required by the _wrap_ instruction
 *
 * @property [] candyGuard
 * @property [**signer**] authority
 * @property [_writable_] candyMachine
 * @property [] candyMachineProgram
 * @property [**signer**] candyMachineAuthority
 * @category Instructions
 * @category Wrap
 * @category generated
 */
export type WrapInstructionAccounts = {
  candyGuard: web3.PublicKey;
  authority: web3.PublicKey;
  candyMachine: web3.PublicKey;
  candyMachineProgram: web3.PublicKey;
  candyMachineAuthority: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const wrapInstructionDiscriminator = [178, 40, 10, 189, 228, 129, 186, 140];

/**
 * Creates a _Wrap_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Wrap
 * @category generated
 */
export function createWrapInstruction(
  accounts: WrapInstructionAccounts,
  programId = new web3.PublicKey('Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'),
) {
  const [data] = wrapStruct.serialize({
    instructionDiscriminator: wrapInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.candyGuard,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.candyMachineAuthority,
      isWritable: false,
      isSigner: true,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}


