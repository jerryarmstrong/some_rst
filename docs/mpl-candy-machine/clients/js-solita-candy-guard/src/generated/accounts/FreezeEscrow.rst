clients/js-solita-candy-guard/src/generated/accounts/FreezeEscrow.ts
====================================================================

Last edited: 2023-08-11 23:25:39

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link FreezeEscrow}
 * @category Accounts
 * @category generated
 */
export type FreezeEscrowArgs = {
  candyGuard: web3.PublicKey;
  candyMachine: web3.PublicKey;
  frozenCount: beet.bignum;
  firstMintTime: beet.COption<beet.bignum>;
  freezePeriod: beet.bignum;
  destination: web3.PublicKey;
  authority: web3.PublicKey;
};

export const freezeEscrowDiscriminator = [227, 186, 40, 152, 7, 174, 131, 184];
/**
 * Holds the data for the {@link FreezeEscrow} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class FreezeEscrow implements FreezeEscrowArgs {
  private constructor(
    readonly candyGuard: web3.PublicKey,
    readonly candyMachine: web3.PublicKey,
    readonly frozenCount: beet.bignum,
    readonly firstMintTime: beet.COption<beet.bignum>,
    readonly freezePeriod: beet.bignum,
    readonly destination: web3.PublicKey,
    readonly authority: web3.PublicKey,
  ) {}

  /**
   * Creates a {@link FreezeEscrow} instance from the provided args.
   */
  static fromArgs(args: FreezeEscrowArgs) {
    return new FreezeEscrow(
      args.candyGuard,
      args.candyMachine,
      args.frozenCount,
      args.firstMintTime,
      args.freezePeriod,
      args.destination,
      args.authority,
    );
  }

  /**
   * Deserializes the {@link FreezeEscrow} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [FreezeEscrow, number] {
    return FreezeEscrow.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link FreezeEscrow} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<FreezeEscrow> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find FreezeEscrow account at ${address}`);
    }
    return FreezeEscrow.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('Guard1JwRhJkVH6XZhzoYxeBVQe872VH6QggF4BWmS9g'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, freezeEscrowBeet);
  }

  /**
   * Deserializes the {@link FreezeEscrow} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [FreezeEscrow, number] {
    return freezeEscrowBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link FreezeEscrow} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return freezeEscrowBeet.serialize({
      accountDiscriminator: freezeEscrowDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link FreezeEscrow} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: FreezeEscrowArgs) {
    const instance = FreezeEscrow.fromArgs(args);
    return freezeEscrowBeet.toFixedFromValue({
      accountDiscriminator: freezeEscrowDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link FreezeEscrow} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: FreezeEscrowArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(FreezeEscrow.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link FreezeEscrow} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      candyGuard: this.candyGuard.toBase58(),
      candyMachine: this.candyMachine.toBase58(),
      frozenCount: (() => {
        const x = <{ toNumber: () => number }>this.frozenCount;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      firstMintTime: this.firstMintTime,
      freezePeriod: (() => {
        const x = <{ toNumber: () => number }>this.freezePeriod;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      destination: this.destination.toBase58(),
      authority: this.authority.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const freezeEscrowBeet = new beet.FixableBeetStruct<
  FreezeEscrow,
  FreezeEscrowArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['candyGuard', beetSolana.publicKey],
    ['candyMachine', beetSolana.publicKey],
    ['frozenCount', beet.u64],
    ['firstMintTime', beet.coption(beet.i64)],
    ['freezePeriod', beet.i64],
    ['destination', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
  ],
  FreezeEscrow.fromArgs,
  'FreezeEscrow',
);


