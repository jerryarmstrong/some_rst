clients/js/src/generated/accounts/fanoutMint.ts
===============================================

Last edited: 2023-06-19 18:36:17

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type FanoutMint = Account<FanoutMintAccountData>;

export type FanoutMintAccountData = {
  discriminator: Array<number>;
  mint: PublicKey;
  fanout: PublicKey;
  tokenAccount: PublicKey;
  totalInflow: bigint;
  lastSnapshotAmount: bigint;
  bumpSeed: number;
};

export type FanoutMintAccountDataArgs = {
  mint: PublicKey;
  fanout: PublicKey;
  tokenAccount: PublicKey;
  totalInflow: number | bigint;
  lastSnapshotAmount: number | bigint;
  bumpSeed: number;
};

/** @deprecated Use `getFanoutMintAccountDataSerializer()` without any argument instead. */
export function getFanoutMintAccountDataSerializer(
  _context: object
): Serializer<FanoutMintAccountDataArgs, FanoutMintAccountData>;
export function getFanoutMintAccountDataSerializer(): Serializer<
  FanoutMintAccountDataArgs,
  FanoutMintAccountData
>;
export function getFanoutMintAccountDataSerializer(
  _context: object = {}
): Serializer<FanoutMintAccountDataArgs, FanoutMintAccountData> {
  return mapSerializer<FanoutMintAccountDataArgs, any, FanoutMintAccountData>(
    struct<FanoutMintAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['mint', publicKeySerializer()],
        ['fanout', publicKeySerializer()],
        ['tokenAccount', publicKeySerializer()],
        ['totalInflow', u64()],
        ['lastSnapshotAmount', u64()],
        ['bumpSeed', u8()],
      ],
      { description: 'FanoutMintAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [50, 164, 42, 108, 90, 201, 250, 216],
    })
  ) as Serializer<FanoutMintAccountDataArgs, FanoutMintAccountData>;
}

/** @deprecated Use `deserializeFanoutMint(rawAccount)` without any context instead. */
export function deserializeFanoutMint(
  context: object,
  rawAccount: RpcAccount
): FanoutMint;
export function deserializeFanoutMint(rawAccount: RpcAccount): FanoutMint;
export function deserializeFanoutMint(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): FanoutMint {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getFanoutMintAccountDataSerializer()
  );
}

export async function fetchFanoutMint(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FanoutMint> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'FanoutMint');
  return deserializeFanoutMint(maybeAccount);
}

export async function safeFetchFanoutMint(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FanoutMint | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeFanoutMint(maybeAccount) : null;
}

export async function fetchAllFanoutMint(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FanoutMint[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FanoutMint');
    return deserializeFanoutMint(maybeAccount);
  });
}

export async function safeFetchAllFanoutMint(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FanoutMint[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeFanoutMint(maybeAccount as RpcAccount));
}

export function getFanoutMintGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      mint: PublicKey;
      fanout: PublicKey;
      tokenAccount: PublicKey;
      totalInflow: number | bigint;
      lastSnapshotAmount: number | bigint;
      bumpSeed: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      mint: [8, publicKeySerializer()],
      fanout: [40, publicKeySerializer()],
      tokenAccount: [72, publicKeySerializer()],
      totalInflow: [104, u64()],
      lastSnapshotAmount: [112, u64()],
      bumpSeed: [120, u8()],
    })
    .deserializeUsing<FanoutMint>((account) => deserializeFanoutMint(account))
    .whereField('discriminator', [50, 164, 42, 108, 90, 201, 250, 216]);
}

export function getFanoutMintSize(): number {
  return 200;
}

export function findFanoutMintPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the fanout account */
    fanout: PublicKey;
    /** The address of the mint account */
    mint: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('fanout-config'),
    publicKeySerializer().serialize(seeds.fanout),
    publicKeySerializer().serialize(seeds.mint),
  ]);
}

export async function fetchFanoutMintFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFanoutMintPda>[1],
  options?: RpcGetAccountOptions
): Promise<FanoutMint> {
  return fetchFanoutMint(context, findFanoutMintPda(context, seeds), options);
}

export async function safeFetchFanoutMintFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findFanoutMintPda>[1],
  options?: RpcGetAccountOptions
): Promise<FanoutMint | null> {
  return safeFetchFanoutMint(
    context,
    findFanoutMintPda(context, seeds),
    options
  );
}


