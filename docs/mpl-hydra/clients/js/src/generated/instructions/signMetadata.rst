clients/js/src/generated/instructions/signMetadata.ts
=====================================================

Last edited: 2023-06-19 18:36:17

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SignMetadataInstructionAccounts = {
  authority?: Signer;
  fanout: PublicKey | Pda;
  holdingAccount: PublicKey | Pda;
  metadata: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
};

// Data.
export type SignMetadataInstructionData = { discriminator: Array<number> };

export type SignMetadataInstructionDataArgs = {};

/** @deprecated Use `getSignMetadataInstructionDataSerializer()` without any argument instead. */
export function getSignMetadataInstructionDataSerializer(
  _context: object
): Serializer<SignMetadataInstructionDataArgs, SignMetadataInstructionData>;
export function getSignMetadataInstructionDataSerializer(): Serializer<
  SignMetadataInstructionDataArgs,
  SignMetadataInstructionData
>;
export function getSignMetadataInstructionDataSerializer(
  _context: object = {}
): Serializer<SignMetadataInstructionDataArgs, SignMetadataInstructionData> {
  return mapSerializer<
    SignMetadataInstructionDataArgs,
    any,
    SignMetadataInstructionData
  >(
    struct<SignMetadataInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'SignMetadataInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [188, 67, 163, 49, 0, 150, 63, 89] })
  ) as Serializer<SignMetadataInstructionDataArgs, SignMetadataInstructionData>;
}

// Instruction.
export function signMetadata(
  context: Pick<Context, 'programs' | 'identity'>,
  input: SignMetadataInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHydra',
    'hyDQ4Nz1eYyegS6JfenyKwKzYxRsCWCriYSAjtzP4Vg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    fanout: [input.fanout, false] as const,
    holdingAccount: [input.holdingAccount, false] as const,
    metadata: [input.metadata, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.fanout, false);
  addAccountMeta(keys, signers, resolvedAccounts.holdingAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);

  // Data.
  const data = getSignMetadataInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


