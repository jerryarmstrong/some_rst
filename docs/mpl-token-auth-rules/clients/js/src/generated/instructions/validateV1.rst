clients/js/src/generated/instructions/validateV1.ts
===================================================

Last edited: 2023-08-01 17:12:05

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  mapSerializer,
  option,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import { Payload, PayloadArgs, getPayloadSerializer } from '../types';

// Accounts.
export type ValidateV1InstructionAccounts = {
  /** The PDA account where the RuleSet is stored */
  ruleSetPda: PublicKey | Pda;
  /** Mint of token asset */
  mint: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Payer for RuleSet state PDA account */
  payer?: Signer;
  /** Signing authority for any Rule state updates */
  ruleAuthority?: Signer;
  /** The PDA account where any RuleSet state is stored */
  ruleSetStatePda?: PublicKey | Pda;
};

// Data.
export type ValidateV1InstructionData = {
  discriminator: number;
  validateV1Discriminator: number;
  operation: string;
  payload: Payload;
  updateRuleState: boolean;
  ruleSetRevision: Option<bigint>;
};

export type ValidateV1InstructionDataArgs = {
  operation: string;
  payload: PayloadArgs;
  updateRuleState: boolean;
  ruleSetRevision: OptionOrNullable<number | bigint>;
};

/** @deprecated Use `getValidateV1InstructionDataSerializer()` without any argument instead. */
export function getValidateV1InstructionDataSerializer(
  _context: object
): Serializer<ValidateV1InstructionDataArgs, ValidateV1InstructionData>;
export function getValidateV1InstructionDataSerializer(): Serializer<
  ValidateV1InstructionDataArgs,
  ValidateV1InstructionData
>;
export function getValidateV1InstructionDataSerializer(
  _context: object = {}
): Serializer<ValidateV1InstructionDataArgs, ValidateV1InstructionData> {
  return mapSerializer<
    ValidateV1InstructionDataArgs,
    any,
    ValidateV1InstructionData
  >(
    struct<ValidateV1InstructionData>(
      [
        ['discriminator', u8()],
        ['validateV1Discriminator', u8()],
        ['operation', string()],
        ['payload', getPayloadSerializer()],
        ['updateRuleState', bool()],
        ['ruleSetRevision', option(u64())],
      ],
      { description: 'ValidateV1InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1, validateV1Discriminator: 0 })
  ) as Serializer<ValidateV1InstructionDataArgs, ValidateV1InstructionData>;
}

// Args.
export type ValidateV1InstructionArgs = ValidateV1InstructionDataArgs;

// Instruction.
export function validateV1(
  context: Pick<Context, 'programs'>,
  input: ValidateV1InstructionAccounts & ValidateV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    ruleSetPda: [input.ruleSetPda, false] as const,
    mint: [input.mint, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer ? ([input.payer, true] as const) : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ruleAuthority',
    input.ruleAuthority
      ? ([input.ruleAuthority, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ruleSetStatePda',
    input.ruleSetStatePda
      ? ([input.ruleSetStatePda, true] as const)
      : ([programId, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.ruleSetPda, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.ruleAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.ruleSetStatePda, false);

  // Data.
  const data = getValidateV1InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


