packages/sdk/src/generated/accounts/MigrationState.ts
=====================================================

Last edited: 2023-06-14 20:00:41

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { CollectionInfo, collectionInfoBeet } from './CollectionInfo';
import { UnlockMethod, unlockMethodBeet } from '../types/UnlockMethod';
import { MigrationStatus, migrationStatusBeet } from './MigrationStatus';

/**
 * Arguments used to create {@link MigrationState}
 * @category Accounts
 * @category generated
 */
export type MigrationStateArgs = {
  collectionInfo: CollectionInfo;
  unlockMethod: UnlockMethod;
  status: MigrationStatus;
};
/**
 * Holds the data for the {@link MigrationState} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class MigrationState implements MigrationStateArgs {
  private constructor(
    readonly collectionInfo: CollectionInfo,
    readonly unlockMethod: UnlockMethod,
    readonly status: MigrationStatus,
  ) {}

  /**
   * Creates a {@link MigrationState} instance from the provided args.
   */
  static fromArgs(args: MigrationStateArgs) {
    return new MigrationState(args.collectionInfo, args.unlockMethod, args.status);
  }

  /**
   * Deserializes the {@link MigrationState} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [MigrationState, number] {
    return MigrationState.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link MigrationState} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<MigrationState> {
    const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
    if (accountInfo == null) {
      throw new Error(`Unable to find MigrationState account at ${address}`);
    }
    return MigrationState.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey('migrxZFChTqicHpNa1CAjPcF29Mui2JU2q4Ym7qQUTi'),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, migrationStateBeet);
  }

  /**
   * Deserializes the {@link MigrationState} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [MigrationState, number] {
    return migrationStateBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link MigrationState} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return migrationStateBeet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link MigrationState}
   */
  static get byteSize() {
    return migrationStateBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link MigrationState} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(MigrationState.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link MigrationState} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === MigrationState.byteSize;
  }

  /**
   * Returns a readable version of {@link MigrationState} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      collectionInfo: this.collectionInfo,
      unlockMethod: 'UnlockMethod.' + UnlockMethod[this.unlockMethod],
      status: this.status,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const migrationStateBeet = new beet.BeetStruct<MigrationState, MigrationStateArgs>(
  [
    ['collectionInfo', collectionInfoBeet],
    ['unlockMethod', unlockMethodBeet],
    ['status', migrationStatusBeet],
  ],
  MigrationState.fromArgs,
  'MigrationState',
);


