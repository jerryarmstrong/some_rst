packages/sdk/src/generated/instructions/Migrate.ts
==================================================

Last edited: 2023-06-14 20:00:41

Contents:

.. code-block:: ts

    /**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category Migrate
 * @category generated
 */
export const MigrateStruct = new beet.BeetArgsStruct<{ instructionDiscriminator: number }>(
  [['instructionDiscriminator', beet.u8]],
  'MigrateInstructionArgs',
);
/**
 * Accounts required by the _Migrate_ instruction
 *
 * @property [_writable_] itemMetadata Metadata account
 * @property [_writable_] itemEdition Edition account
 * @property [_writable_] itemToken Token account
 * @property [] tokenOwner Token owner
 * @property [] tokenOwnerProgram Program that owns the token owner
 * @property [] tokenOwnerProgramBuffer Executable buffer account of the program owner
 * @property [] itemMint Mint account
 * @property [_writable_, **signer**] payer Pays for migration costs
 * @property [] programSigner Program signer PDA
 * @property [] collectionMetadata Collection metadata account
 * @property [] delegateRecord Update authority or delegate
 * @property [_writable_] tokenRecord Update authority or delegate
 * @property [] sysvarInstructions Instruction sysvar account
 * @property [] splTokenProgram Token Program
 * @property [] authorizationRulesProgram (optional) Token Authorization Rules Program
 * @property [] authorizationRules (optional) Token Authorization Rules account
 * @property [_writable_] migrationState The migration state account
 * @property [] tokenMetadataProgram Token Metadata program for the CPI call
 * @category Instructions
 * @category Migrate
 * @category generated
 */
export type MigrateInstructionAccounts = {
  itemMetadata: web3.PublicKey;
  itemEdition: web3.PublicKey;
  itemToken: web3.PublicKey;
  tokenOwner: web3.PublicKey;
  tokenOwnerProgram: web3.PublicKey;
  tokenOwnerProgramBuffer: web3.PublicKey;
  itemMint: web3.PublicKey;
  payer: web3.PublicKey;
  programSigner: web3.PublicKey;
  collectionMetadata: web3.PublicKey;
  delegateRecord: web3.PublicKey;
  tokenRecord: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  sysvarInstructions: web3.PublicKey;
  splTokenProgram: web3.PublicKey;
  authorizationRulesProgram?: web3.PublicKey;
  authorizationRules?: web3.PublicKey;
  migrationState: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
};

export const migrateInstructionDiscriminator = 5;

/**
 * Creates a _Migrate_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Migrate
 * @category generated
 */
export function createMigrateInstruction(
  accounts: MigrateInstructionAccounts,
  programId = new web3.PublicKey('migrxZFChTqicHpNa1CAjPcF29Mui2JU2q4Ym7qQUTi'),
) {
  const [data] = MigrateStruct.serialize({
    instructionDiscriminator: migrateInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.itemMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.itemEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.itemToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerProgramBuffer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.itemMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.programSigner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.delegateRecord,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.sysvarInstructions,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authorizationRulesProgram ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authorizationRules ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.migrationState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}


