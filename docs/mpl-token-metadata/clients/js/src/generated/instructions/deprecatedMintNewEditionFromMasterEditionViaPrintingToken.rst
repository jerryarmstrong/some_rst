clients/js/src/generated/instructions/deprecatedMintNewEditionFromMasterEditionViaPrintingToken.ts
==================================================================================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findMasterEditionPda, findMetadataPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts =
  {
    /** New Metadata key (pda of ['metadata', program id, mint id]) */
    metadata?: PublicKey | Pda;
    /** New Edition V1 (pda of ['metadata', program id, mint id, 'edition']) */
    edition?: PublicKey | Pda;
    /** Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition']) */
    masterEdition?: PublicKey | Pda;
    /** Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY */
    mint: PublicKey | Pda;
    /** Mint authority of new mint */
    mintAuthority: Signer;
    /** Printing Mint of master record edition */
    printingMint: PublicKey | Pda;
    /** Token account containing Printing mint token to be transferred */
    masterTokenAccount: PublicKey | Pda;
    /** Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number]) */
    editionMarker?: PublicKey | Pda;
    /** Burn authority for this token */
    burnAuthority: Signer;
    /** payer */
    payer?: Signer;
    /** update authority info for new metadata account */
    masterUpdateAuthority: PublicKey | Pda;
    /** Master record metadata account */
    masterMetadata: PublicKey | Pda;
    /** Token program */
    tokenProgram?: PublicKey | Pda;
    /** System program */
    systemProgram?: PublicKey | Pda;
    /** Rent info */
    rent?: PublicKey | Pda;
    /** Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list. */
    reservationList?: PublicKey | Pda;
  };

// Data.
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData =
  { discriminator: number };

export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs =
  {};

/** @deprecated Use `getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer()` without any argument instead. */
export function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer(
  _context: object
): Serializer<
  DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
  DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
>;
export function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer(): Serializer<
  DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
  DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
>;
export function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer(
  _context: object = {}
): Serializer<
  DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
  DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
> {
  return mapSerializer<
    DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
    any,
    DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
  >(
    struct<DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData>(
      [['discriminator', u8()]],
      {
        description:
          'DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData',
      }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs,
    DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData
  >;
}

// Instruction.
export function deprecatedMintNewEditionFromMasterEditionViaPrintingToken(
  context: Pick<Context, 'programs' | 'eddsa' | 'payer'>,
  input: DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    mint: [input.mint, true] as const,
    mintAuthority: [input.mintAuthority, false] as const,
    printingMint: [input.printingMint, true] as const,
    masterTokenAccount: [input.masterTokenAccount, true] as const,
    burnAuthority: [input.burnAuthority, false] as const,
    masterUpdateAuthority: [input.masterUpdateAuthority, false] as const,
    masterMetadata: [input.masterMetadata, false] as const,
    reservationList: [input.reservationList, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'metadata',
    input.metadata
      ? ([input.metadata, true] as const)
      : ([
          findMetadataPda(context, { mint: publicKey(input.mint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'edition',
    input.edition
      ? ([input.edition, true] as const)
      : ([
          findMasterEditionPda(context, { mint: publicKey(input.mint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'masterEdition',
    input.masterEdition
      ? ([input.masterEdition, true] as const)
      : ([
          findMasterEditionPda(context, { mint: publicKey(input.mint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'editionMarker',
    input.editionMarker
      ? ([input.editionMarker, true] as const)
      : ([
          findMasterEditionPda(context, { mint: publicKey(input.mint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, false] as const)
      : ([context.payer, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.edition, false);
  addAccountMeta(keys, signers, resolvedAccounts.masterEdition, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.mintAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.printingMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.masterTokenAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.editionMarker, false);
  addAccountMeta(keys, signers, resolvedAccounts.burnAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.masterUpdateAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.masterMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);
  addAccountMeta(keys, signers, resolvedAccounts.reservationList, true);

  // Data.
  const data =
    getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer().serialize(
      {}
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


