clients/js/src/generated/instructions/updateMetadataAccountV2.ts
================================================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  none,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import { DataV2, DataV2Args, getDataV2Serializer } from '../types';

// Accounts.
export type UpdateMetadataAccountV2InstructionAccounts = {
  /** Metadata account */
  metadata: PublicKey | Pda;
  /** Update authority key */
  updateAuthority?: Signer;
};

// Data.
export type UpdateMetadataAccountV2InstructionData = {
  discriminator: number;
  data: Option<DataV2>;
  newUpdateAuthority: Option<PublicKey>;
  primarySaleHappened: Option<boolean>;
  isMutable: Option<boolean>;
};

export type UpdateMetadataAccountV2InstructionDataArgs = {
  data?: OptionOrNullable<DataV2Args>;
  newUpdateAuthority?: OptionOrNullable<PublicKey>;
  primarySaleHappened?: OptionOrNullable<boolean>;
  isMutable?: OptionOrNullable<boolean>;
};

/** @deprecated Use `getUpdateMetadataAccountV2InstructionDataSerializer()` without any argument instead. */
export function getUpdateMetadataAccountV2InstructionDataSerializer(
  _context: object
): Serializer<
  UpdateMetadataAccountV2InstructionDataArgs,
  UpdateMetadataAccountV2InstructionData
>;
export function getUpdateMetadataAccountV2InstructionDataSerializer(): Serializer<
  UpdateMetadataAccountV2InstructionDataArgs,
  UpdateMetadataAccountV2InstructionData
>;
export function getUpdateMetadataAccountV2InstructionDataSerializer(
  _context: object = {}
): Serializer<
  UpdateMetadataAccountV2InstructionDataArgs,
  UpdateMetadataAccountV2InstructionData
> {
  return mapSerializer<
    UpdateMetadataAccountV2InstructionDataArgs,
    any,
    UpdateMetadataAccountV2InstructionData
  >(
    struct<UpdateMetadataAccountV2InstructionData>(
      [
        ['discriminator', u8()],
        ['data', option(getDataV2Serializer())],
        ['newUpdateAuthority', option(publicKeySerializer())],
        ['primarySaleHappened', option(bool())],
        ['isMutable', option(bool())],
      ],
      { description: 'UpdateMetadataAccountV2InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: 15,
      data: value.data ?? none(),
      newUpdateAuthority: value.newUpdateAuthority ?? none(),
      primarySaleHappened: value.primarySaleHappened ?? none(),
      isMutable: value.isMutable ?? none(),
    })
  ) as Serializer<
    UpdateMetadataAccountV2InstructionDataArgs,
    UpdateMetadataAccountV2InstructionData
  >;
}

// Args.
export type UpdateMetadataAccountV2InstructionArgs =
  UpdateMetadataAccountV2InstructionDataArgs;

// Instruction.
export function updateMetadataAccountV2(
  context: Pick<Context, 'programs' | 'identity'>,
  input: UpdateMetadataAccountV2InstructionAccounts &
    UpdateMetadataAccountV2InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    metadata: [input.metadata, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'updateAuthority',
    input.updateAuthority
      ? ([input.updateAuthority, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.updateAuthority, false);

  // Data.
  const data =
    getUpdateMetadataAccountV2InstructionDataSerializer().serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


