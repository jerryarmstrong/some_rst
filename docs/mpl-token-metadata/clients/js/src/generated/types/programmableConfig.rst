clients/js/src/generated/types/programmableConfig.ts
====================================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type ProgrammableConfig = { __kind: 'V1'; ruleSet: Option<PublicKey> };

export type ProgrammableConfigArgs = {
  __kind: 'V1';
  ruleSet: OptionOrNullable<PublicKey>;
};

/** @deprecated Use `getProgrammableConfigSerializer()` without any argument instead. */
export function getProgrammableConfigSerializer(
  _context: object
): Serializer<ProgrammableConfigArgs, ProgrammableConfig>;
export function getProgrammableConfigSerializer(): Serializer<
  ProgrammableConfigArgs,
  ProgrammableConfig
>;
export function getProgrammableConfigSerializer(
  _context: object = {}
): Serializer<ProgrammableConfigArgs, ProgrammableConfig> {
  return dataEnum<ProgrammableConfig>(
    [
      [
        'V1',
        struct<GetDataEnumKindContent<ProgrammableConfig, 'V1'>>([
          ['ruleSet', option(publicKeySerializer())],
        ]),
      ],
    ],
    { description: 'ProgrammableConfig' }
  ) as Serializer<ProgrammableConfigArgs, ProgrammableConfig>;
}

// Data Enum Helpers.
export function programmableConfig(
  kind: 'V1',
  data: GetDataEnumKindContent<ProgrammableConfigArgs, 'V1'>
): GetDataEnumKind<ProgrammableConfigArgs, 'V1'>;
export function programmableConfig<K extends ProgrammableConfigArgs['__kind']>(
  kind: K,
  data?: any
): Extract<ProgrammableConfigArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isProgrammableConfig<K extends ProgrammableConfig['__kind']>(
  kind: K,
  value: ProgrammableConfig
): value is ProgrammableConfig & { __kind: K } {
  return value.__kind === kind;
}


