clients/js/src/generated/types/burnArgs.ts
==========================================

Last edited: 2023-08-11 07:39:15

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type BurnArgs = { __kind: 'V1'; amount: bigint };

export type BurnArgsArgs = { __kind: 'V1'; amount?: number | bigint };

/** @deprecated Use `getBurnArgsSerializer()` without any argument instead. */
export function getBurnArgsSerializer(
  _context: object
): Serializer<BurnArgsArgs, BurnArgs>;
export function getBurnArgsSerializer(): Serializer<BurnArgsArgs, BurnArgs>;
export function getBurnArgsSerializer(
  _context: object = {}
): Serializer<BurnArgsArgs, BurnArgs> {
  return dataEnum<BurnArgs>(
    [
      [
        'V1',
        mapSerializer<
          GetDataEnumKindContent<BurnArgsArgs, 'V1'>,
          any,
          GetDataEnumKindContent<BurnArgs, 'V1'>
        >(
          struct<GetDataEnumKindContent<BurnArgs, 'V1'>>([['amount', u64()]]),
          (value) => ({ ...value, amount: value.amount ?? 1 })
        ),
      ],
    ],
    { description: 'BurnArgs' }
  ) as Serializer<BurnArgsArgs, BurnArgs>;
}

// Data Enum Helpers.
export function burnArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<BurnArgsArgs, 'V1'>
): GetDataEnumKind<BurnArgsArgs, 'V1'>;
export function burnArgs<K extends BurnArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BurnArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBurnArgs<K extends BurnArgs['__kind']>(
  kind: K,
  value: BurnArgs
): value is BurnArgs & { __kind: K } {
  return value.__kind === kind;
}


