test/package/src/generated/instructions/setCollection.ts
========================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetCollectionInstructionAccounts = {
  candyMachine: PublicKey | Pda;
  authority?: Signer;
  authorityPda: PublicKey | Pda;
  payer?: Signer;
  collectionMint: PublicKey | Pda;
  collectionMetadata: PublicKey | Pda;
  collectionAuthorityRecord: PublicKey | Pda;
  newCollectionUpdateAuthority: Signer;
  newCollectionMetadata: PublicKey | Pda;
  newCollectionMint: PublicKey | Pda;
  newCollectionMasterEdition: PublicKey | Pda;
  newCollectionAuthorityRecord: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type SetCollectionInstructionData = { discriminator: Array<number> };

export type SetCollectionInstructionDataArgs = {};

/** @deprecated Use `getSetCollectionInstructionDataSerializer()` without any argument instead. */
export function getSetCollectionInstructionDataSerializer(
  _context: object
): Serializer<SetCollectionInstructionDataArgs, SetCollectionInstructionData>;
export function getSetCollectionInstructionDataSerializer(): Serializer<
  SetCollectionInstructionDataArgs,
  SetCollectionInstructionData
>;
export function getSetCollectionInstructionDataSerializer(
  _context: object = {}
): Serializer<SetCollectionInstructionDataArgs, SetCollectionInstructionData> {
  return mapSerializer<
    SetCollectionInstructionDataArgs,
    any,
    SetCollectionInstructionData
  >(
    struct<SetCollectionInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'SetCollectionInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [192, 254, 206, 76, 168, 182, 59, 223],
    })
  ) as Serializer<
    SetCollectionInstructionDataArgs,
    SetCollectionInstructionData
  >;
}

// Instruction.
export function setCollection(
  context: Pick<Context, 'programs' | 'identity' | 'payer'>,
  input: SetCollectionInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    candyMachine: [input.candyMachine, true] as const,
    authorityPda: [input.authorityPda, true] as const,
    collectionMint: [input.collectionMint, false] as const,
    collectionMetadata: [input.collectionMetadata, false] as const,
    collectionAuthorityRecord: [input.collectionAuthorityRecord, true] as const,
    newCollectionUpdateAuthority: [
      input.newCollectionUpdateAuthority,
      true,
    ] as const,
    newCollectionMetadata: [input.newCollectionMetadata, false] as const,
    newCollectionMint: [input.newCollectionMint, false] as const,
    newCollectionMasterEdition: [
      input.newCollectionMasterEdition,
      false,
    ] as const,
    newCollectionAuthorityRecord: [
      input.newCollectionAuthorityRecord,
      true,
    ] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, false] as const)
      : ([context.payer, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.candyMachine, false);
  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.authorityPda, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionAuthorityRecord,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.newCollectionUpdateAuthority,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.newCollectionMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.newCollectionMint, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.newCollectionMasterEdition,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.newCollectionAuthorityRecord,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data = getSetCollectionInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


