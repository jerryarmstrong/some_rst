test/package/src/generated/instructions/useAsset.ts
===================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  UseAssetArgs,
  UseAssetArgsArgs,
  getUseAssetArgsSerializer,
} from '../types';

// Accounts.
export type UseAssetInstructionAccounts = {
  /** Metadata account */
  metadata: PublicKey | Pda;
  /** Token Account Of NFT */
  tokenAccount: PublicKey | Pda;
  /** Mint of the Metadata */
  mint: PublicKey | Pda;
  /** Use authority or current owner of the asset */
  useAuthority: Signer;
  /** Owner */
  owner: PublicKey | Pda;
  /** SPL Token program */
  splTokenProgram?: PublicKey | Pda;
  /** Associated Token program */
  ataProgram?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Use Authority Record PDA (if present the program assumes a delegated use authority) */
  useAuthorityRecord?: PublicKey | Pda;
  /** Token Authorization Rules account */
  authorizationRules?: PublicKey | Pda;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: PublicKey | Pda;
};

// Data.
export type UseAssetInstructionData = {
  discriminator: number;
  useAssetArgs: UseAssetArgs;
};

export type UseAssetInstructionDataArgs = { useAssetArgs: UseAssetArgsArgs };

/** @deprecated Use `getUseAssetInstructionDataSerializer()` without any argument instead. */
export function getUseAssetInstructionDataSerializer(
  _context: object
): Serializer<UseAssetInstructionDataArgs, UseAssetInstructionData>;
export function getUseAssetInstructionDataSerializer(): Serializer<
  UseAssetInstructionDataArgs,
  UseAssetInstructionData
>;
export function getUseAssetInstructionDataSerializer(
  _context: object = {}
): Serializer<UseAssetInstructionDataArgs, UseAssetInstructionData> {
  return mapSerializer<
    UseAssetInstructionDataArgs,
    any,
    UseAssetInstructionData
  >(
    struct<UseAssetInstructionData>(
      [
        ['discriminator', u8()],
        ['useAssetArgs', getUseAssetArgsSerializer()],
      ],
      { description: 'UseAssetInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 45 })
  ) as Serializer<UseAssetInstructionDataArgs, UseAssetInstructionData>;
}

// Args.
export type UseAssetInstructionArgs = UseAssetInstructionDataArgs;

// Instruction.
export function useAsset(
  context: Pick<Context, 'programs'>,
  input: UseAssetInstructionAccounts & UseAssetInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    metadata: [input.metadata, true] as const,
    tokenAccount: [input.tokenAccount, true] as const,
    mint: [input.mint, true] as const,
    useAuthority: [input.useAuthority, true] as const,
    owner: [input.owner, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'splTokenProgram',
    input.splTokenProgram
      ? ([input.splTokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ataProgram',
    input.ataProgram
      ? ([input.ataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splAssociatedToken',
            'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'useAuthorityRecord',
    input.useAuthorityRecord
      ? ([input.useAuthorityRecord, true] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRules',
    input.authorizationRules
      ? ([input.authorizationRules, false] as const)
      : ([programId, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'authorizationRulesProgram',
    input.authorizationRulesProgram
      ? ([input.authorizationRulesProgram, false] as const)
      : ([programId, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.useAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.owner, false);
  addAccountMeta(keys, signers, resolvedAccounts.splTokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.ataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.useAuthorityRecord, false);
  addAccountMeta(keys, signers, resolvedAccounts.authorizationRules, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.authorizationRulesProgram,
    false
  );

  // Data.
  const data = getUseAssetInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


