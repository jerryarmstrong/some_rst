test/package/src/generated/instructions/createMetadataAccount.ts
================================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ACCOUNT_HEADER_SIZE,
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  option,
  string,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findMetadataPda, getMetadataSize } from '../accounts';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';
import { Creator, CreatorArgs, getCreatorSerializer } from '../types';

// Accounts.
export type CreateMetadataAccountInstructionAccounts = {
  /** Metadata key (pda of ['metadata', program id, mint id]) */
  metadata?: Pda;
  /** Mint of token asset */
  mint: PublicKey | Pda;
  /** Mint authority */
  mintAuthority: Signer;
  /** payer */
  payer?: Signer;
  /** update authority info */
  updateAuthority: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Rent info */
  rent?: PublicKey | Pda;
};

// Data.
export type CreateMetadataAccountInstructionData = {
  discriminator: number;
  data: {
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<Creator>>;
  };
  isMutable: boolean;
  metadataBump: number;
};

export type CreateMetadataAccountInstructionDataArgs = {
  data: {
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: OptionOrNullable<Array<CreatorArgs>>;
  };
  isMutable: boolean;
  metadataBump: number;
};

/** @deprecated Use `getCreateMetadataAccountInstructionDataSerializer()` without any argument instead. */
export function getCreateMetadataAccountInstructionDataSerializer(
  _context: object
): Serializer<
  CreateMetadataAccountInstructionDataArgs,
  CreateMetadataAccountInstructionData
>;
export function getCreateMetadataAccountInstructionDataSerializer(): Serializer<
  CreateMetadataAccountInstructionDataArgs,
  CreateMetadataAccountInstructionData
>;
export function getCreateMetadataAccountInstructionDataSerializer(
  _context: object = {}
): Serializer<
  CreateMetadataAccountInstructionDataArgs,
  CreateMetadataAccountInstructionData
> {
  return mapSerializer<
    CreateMetadataAccountInstructionDataArgs,
    any,
    CreateMetadataAccountInstructionData
  >(
    struct<CreateMetadataAccountInstructionData>(
      [
        ['discriminator', u8()],
        [
          'data',
          struct<any>([
            ['name', string()],
            ['symbol', string()],
            ['uri', string()],
            ['sellerFeeBasisPoints', u16()],
            ['creators', option(array(getCreatorSerializer()))],
          ]),
        ],
        ['isMutable', bool()],
        ['metadataBump', u8()],
      ],
      { description: 'CreateMetadataAccountInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<
    CreateMetadataAccountInstructionDataArgs,
    CreateMetadataAccountInstructionData
  >;
}

// Args.
export type CreateMetadataAccountInstructionArgs = PickPartial<
  CreateMetadataAccountInstructionDataArgs,
  'metadataBump'
>;

// Instruction.
export function createMetadataAccount(
  context: Pick<Context, 'programs' | 'eddsa' | 'payer'>,
  input: CreateMetadataAccountInstructionAccounts &
    CreateMetadataAccountInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    mint: [input.mint, false] as const,
    mintAuthority: [input.mintAuthority, false] as const,
    updateAuthority: [input.updateAuthority, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'metadata',
    input.metadata
      ? ([input.metadata, true] as const)
      : ([
          findMetadataPda(context, { mint: publicKey(input.mint, false) }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'metadataBump',
    input.metadataBump ?? resolvedAccounts.metadata[0][1]
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.mintAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.updateAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getCreateMetadataAccountInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = getMetadataSize() + ACCOUNT_HEADER_SIZE;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


