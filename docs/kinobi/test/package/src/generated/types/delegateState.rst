test/package/src/generated/types/delegateState.ts
=================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import { DelegateRole, DelegateRoleArgs, getDelegateRoleSerializer } from '.';

export type DelegateState = {
  role: DelegateRole;
  delegate: PublicKey;
  hasData: boolean;
};

export type DelegateStateArgs = {
  role: DelegateRoleArgs;
  delegate: PublicKey;
  hasData: boolean;
};

/** @deprecated Use `getDelegateStateSerializer()` without any argument instead. */
export function getDelegateStateSerializer(
  _context: object
): Serializer<DelegateStateArgs, DelegateState>;
export function getDelegateStateSerializer(): Serializer<
  DelegateStateArgs,
  DelegateState
>;
export function getDelegateStateSerializer(
  _context: object = {}
): Serializer<DelegateStateArgs, DelegateState> {
  return struct<DelegateState>(
    [
      ['role', getDelegateRoleSerializer()],
      ['delegate', publicKeySerializer()],
      ['hasData', bool()],
    ],
    { description: 'DelegateState' }
  ) as Serializer<DelegateStateArgs, DelegateState>;
}


