test/package/src/generated/types/recursiveType.ts
=================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Serializer,
  array,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type RecursiveType = { name: string; children: Array<RecursiveType> };

export type RecursiveTypeArgs = {
  name: string;
  children: Array<RecursiveTypeArgs>;
};

/** @deprecated Use `getRecursiveTypeSerializer()` without any argument instead. */
export function getRecursiveTypeSerializer(
  _context: object
): Serializer<RecursiveTypeArgs, RecursiveType>;
export function getRecursiveTypeSerializer(): Serializer<
  RecursiveTypeArgs,
  RecursiveType
>;
export function getRecursiveTypeSerializer(
  _context: object = {}
): Serializer<RecursiveTypeArgs, RecursiveType> {
  return struct<RecursiveType>(
    [
      ['name', string()],
      ['children', array(getRecursiveTypeSerializer())],
    ],
    { description: 'RecursiveType' }
  ) as Serializer<RecursiveTypeArgs, RecursiveType>;
}


