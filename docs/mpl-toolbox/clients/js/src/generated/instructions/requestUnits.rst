clients/js/src/generated/instructions/requestUnits.ts
=====================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';

// Data.
export type RequestUnitsInstructionData = {
  discriminator: number;
  /** Units to request for transaction-wide compute. */
  units: number;
  /** Prioritization fee lamports. */
  additionalFee: number;
};

export type RequestUnitsInstructionDataArgs = {
  /** Units to request for transaction-wide compute. */
  units: number;
  /** Prioritization fee lamports. */
  additionalFee: number;
};

/** @deprecated Use `getRequestUnitsInstructionDataSerializer()` without any argument instead. */
export function getRequestUnitsInstructionDataSerializer(
  _context: object
): Serializer<RequestUnitsInstructionDataArgs, RequestUnitsInstructionData>;
export function getRequestUnitsInstructionDataSerializer(): Serializer<
  RequestUnitsInstructionDataArgs,
  RequestUnitsInstructionData
>;
export function getRequestUnitsInstructionDataSerializer(
  _context: object = {}
): Serializer<RequestUnitsInstructionDataArgs, RequestUnitsInstructionData> {
  return mapSerializer<
    RequestUnitsInstructionDataArgs,
    any,
    RequestUnitsInstructionData
  >(
    struct<RequestUnitsInstructionData>(
      [
        ['discriminator', u8()],
        ['units', u32()],
        ['additionalFee', u32()],
      ],
      { description: 'RequestUnitsInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<RequestUnitsInstructionDataArgs, RequestUnitsInstructionData>;
}

// Args.
export type RequestUnitsInstructionArgs = RequestUnitsInstructionDataArgs;

// Instruction.
export function requestUnits(
  context: Pick<Context, 'programs'>,
  input: RequestUnitsInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splComputeBudget',
    'ComputeBudget111111111111111111111111111111'
  );

  // Resolved inputs.
  const resolvingArgs = {};
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Data.
  const data =
    getRequestUnitsInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


