clients/js/src/generated/instructions/revokeTokenDelegate.ts
============================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta } from '../shared';

// Accounts.
export type RevokeTokenDelegateInstructionAccounts = {
  source: PublicKey | Pda;
  owner: Signer;
};

// Data.
export type RevokeTokenDelegateInstructionData = { discriminator: number };

export type RevokeTokenDelegateInstructionDataArgs = {};

/** @deprecated Use `getRevokeTokenDelegateInstructionDataSerializer()` without any argument instead. */
export function getRevokeTokenDelegateInstructionDataSerializer(
  _context: object
): Serializer<
  RevokeTokenDelegateInstructionDataArgs,
  RevokeTokenDelegateInstructionData
>;
export function getRevokeTokenDelegateInstructionDataSerializer(): Serializer<
  RevokeTokenDelegateInstructionDataArgs,
  RevokeTokenDelegateInstructionData
>;
export function getRevokeTokenDelegateInstructionDataSerializer(
  _context: object = {}
): Serializer<
  RevokeTokenDelegateInstructionDataArgs,
  RevokeTokenDelegateInstructionData
> {
  return mapSerializer<
    RevokeTokenDelegateInstructionDataArgs,
    any,
    RevokeTokenDelegateInstructionData
  >(
    struct<RevokeTokenDelegateInstructionData>([['discriminator', u8()]], {
      description: 'RevokeTokenDelegateInstructionData',
    }),
    (value) => ({ ...value, discriminator: 5 })
  ) as Serializer<
    RevokeTokenDelegateInstructionDataArgs,
    RevokeTokenDelegateInstructionData
  >;
}

// Instruction.
export function revokeTokenDelegate(
  context: Pick<Context, 'programs'>,
  input: RevokeTokenDelegateInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    source: [input.source, true] as const,
    owner: [input.owner, false] as const,
  };

  addAccountMeta(keys, signers, resolvedAccounts.source, false);
  addAccountMeta(keys, signers, resolvedAccounts.owner, false);

  // Data.
  const data = getRevokeTokenDelegateInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


