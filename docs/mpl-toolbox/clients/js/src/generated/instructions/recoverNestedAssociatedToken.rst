clients/js/src/generated/instructions/recoverNestedAssociatedToken.ts
=====================================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type RecoverNestedAssociatedTokenInstructionAccounts = {
  nestedAssociatedAccountAddress: PublicKey | Pda;
  nestedTokenMintAddress: PublicKey | Pda;
  destinationAssociatedAccountAddress: PublicKey | Pda;
  ownerAssociatedAccountAddress: PublicKey | Pda;
  ownerTokenMintAddress: PublicKey | Pda;
  walletAddress: Signer;
  tokenProgram?: PublicKey | Pda;
};

// Instruction.
export function recoverNestedAssociatedToken(
  context: Pick<Context, 'programs'>,
  input: RecoverNestedAssociatedTokenInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splAssociatedToken',
    'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    nestedAssociatedAccountAddress: [
      input.nestedAssociatedAccountAddress,
      true,
    ] as const,
    nestedTokenMintAddress: [input.nestedTokenMintAddress, false] as const,
    destinationAssociatedAccountAddress: [
      input.destinationAssociatedAccountAddress,
      true,
    ] as const,
    ownerAssociatedAccountAddress: [
      input.ownerAssociatedAccountAddress,
      false,
    ] as const,
    ownerTokenMintAddress: [input.ownerTokenMintAddress, false] as const,
    walletAddress: [input.walletAddress, true] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );

  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.nestedAssociatedAccountAddress,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.nestedTokenMintAddress, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.destinationAssociatedAccountAddress,
    false
  );
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.ownerAssociatedAccountAddress,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.ownerTokenMintAddress, false);
  addAccountMeta(keys, signers, resolvedAccounts.walletAddress, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);

  // Data.
  const data = new Uint8Array();

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


