clients/js/src/generated/instructions/initializeMint.ts
=======================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type InitializeMintInstructionAccounts = {
  mint: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type InitializeMintInstructionData = {
  discriminator: number;
  decimals: number;
  mintAuthority: PublicKey;
  freezeAuthority: Option<PublicKey>;
};

export type InitializeMintInstructionDataArgs = {
  decimals: number;
  mintAuthority: PublicKey;
  freezeAuthority: OptionOrNullable<PublicKey>;
};

/** @deprecated Use `getInitializeMintInstructionDataSerializer()` without any argument instead. */
export function getInitializeMintInstructionDataSerializer(
  _context: object
): Serializer<InitializeMintInstructionDataArgs, InitializeMintInstructionData>;
export function getInitializeMintInstructionDataSerializer(): Serializer<
  InitializeMintInstructionDataArgs,
  InitializeMintInstructionData
>;
export function getInitializeMintInstructionDataSerializer(
  _context: object = {}
): Serializer<
  InitializeMintInstructionDataArgs,
  InitializeMintInstructionData
> {
  return mapSerializer<
    InitializeMintInstructionDataArgs,
    any,
    InitializeMintInstructionData
  >(
    struct<InitializeMintInstructionData>(
      [
        ['discriminator', u8()],
        ['decimals', u8()],
        ['mintAuthority', publicKeySerializer()],
        ['freezeAuthority', option(publicKeySerializer())],
      ],
      { description: 'InitializeMintInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<
    InitializeMintInstructionDataArgs,
    InitializeMintInstructionData
  >;
}

// Args.
export type InitializeMintInstructionArgs = InitializeMintInstructionDataArgs;

// Instruction.
export function initializeMint(
  context: Pick<Context, 'programs'>,
  input: InitializeMintInstructionAccounts & InitializeMintInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    mint: [input.mint, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getInitializeMintInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


