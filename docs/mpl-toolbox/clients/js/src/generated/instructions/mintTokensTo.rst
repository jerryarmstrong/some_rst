clients/js/src/generated/instructions/mintTokensTo.ts
=====================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type MintTokensToInstructionAccounts = {
  mint: PublicKey | Pda;
  token: PublicKey | Pda;
  mintAuthority?: Signer;
};

// Data.
export type MintTokensToInstructionData = {
  discriminator: number;
  amount: bigint;
};

export type MintTokensToInstructionDataArgs = { amount: number | bigint };

/** @deprecated Use `getMintTokensToInstructionDataSerializer()` without any argument instead. */
export function getMintTokensToInstructionDataSerializer(
  _context: object
): Serializer<MintTokensToInstructionDataArgs, MintTokensToInstructionData>;
export function getMintTokensToInstructionDataSerializer(): Serializer<
  MintTokensToInstructionDataArgs,
  MintTokensToInstructionData
>;
export function getMintTokensToInstructionDataSerializer(
  _context: object = {}
): Serializer<MintTokensToInstructionDataArgs, MintTokensToInstructionData> {
  return mapSerializer<
    MintTokensToInstructionDataArgs,
    any,
    MintTokensToInstructionData
  >(
    struct<MintTokensToInstructionData>(
      [
        ['discriminator', u8()],
        ['amount', u64()],
      ],
      { description: 'MintTokensToInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 7 })
  ) as Serializer<MintTokensToInstructionDataArgs, MintTokensToInstructionData>;
}

// Args.
export type MintTokensToInstructionArgs = MintTokensToInstructionDataArgs;

// Instruction.
export function mintTokensTo(
  context: Pick<Context, 'programs' | 'identity'>,
  input: MintTokensToInstructionAccounts & MintTokensToInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    mint: [input.mint, true] as const,
    token: [input.token, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'mintAuthority',
    input.mintAuthority
      ? ([input.mintAuthority, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.token, false);
  addAccountMeta(keys, signers, resolvedAccounts.mintAuthority, false);

  // Data.
  const data =
    getMintTokensToInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


