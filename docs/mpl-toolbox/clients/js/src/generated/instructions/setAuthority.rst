clients/js/src/generated/instructions/setAuthority.ts
=====================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta } from '../shared';
import {
  AuthorityType,
  AuthorityTypeArgs,
  getAuthorityTypeSerializer,
} from '../types';

// Accounts.
export type SetAuthorityInstructionAccounts = {
  owned: PublicKey | Pda;
  owner: PublicKey | Pda | Signer;
};

// Data.
export type SetAuthorityInstructionData = {
  discriminator: number;
  authorityType: AuthorityType;
  newAuthority: Option<PublicKey>;
};

export type SetAuthorityInstructionDataArgs = {
  authorityType: AuthorityTypeArgs;
  newAuthority: OptionOrNullable<PublicKey>;
};

/** @deprecated Use `getSetAuthorityInstructionDataSerializer()` without any argument instead. */
export function getSetAuthorityInstructionDataSerializer(
  _context: object
): Serializer<SetAuthorityInstructionDataArgs, SetAuthorityInstructionData>;
export function getSetAuthorityInstructionDataSerializer(): Serializer<
  SetAuthorityInstructionDataArgs,
  SetAuthorityInstructionData
>;
export function getSetAuthorityInstructionDataSerializer(
  _context: object = {}
): Serializer<SetAuthorityInstructionDataArgs, SetAuthorityInstructionData> {
  return mapSerializer<
    SetAuthorityInstructionDataArgs,
    any,
    SetAuthorityInstructionData
  >(
    struct<SetAuthorityInstructionData>(
      [
        ['discriminator', u8()],
        ['authorityType', getAuthorityTypeSerializer()],
        ['newAuthority', option(publicKeySerializer())],
      ],
      { description: 'SetAuthorityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 6 })
  ) as Serializer<SetAuthorityInstructionDataArgs, SetAuthorityInstructionData>;
}

// Args.
export type SetAuthorityInstructionArgs = SetAuthorityInstructionDataArgs;

// Instruction.
export function setAuthority(
  context: Pick<Context, 'programs'>,
  input: SetAuthorityInstructionAccounts & SetAuthorityInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'splToken',
    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    owned: [input.owned, true] as const,
    owner: [input.owner, false] as const,
  };
  const resolvingArgs = {};
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.owned, false);
  addAccountMeta(keys, signers, resolvedAccounts.owner, false);

  // Data.
  const data =
    getSetAuthorityInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


