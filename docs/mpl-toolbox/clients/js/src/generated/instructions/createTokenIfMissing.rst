clients/js/src/generated/instructions/createTokenIfMissing.ts
=============================================================

Last edited: 2023-06-19 17:40:55

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findAssociatedTokenPda } from '../../hooked';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type CreateTokenIfMissingInstructionAccounts = {
  /** The account paying for the token account creation if needed */
  payer?: Signer;
  /** The token account that may or may not exist */
  token?: PublicKey | Pda;
  /** The mint account of the provided token account */
  mint: PublicKey | Pda;
  /** The owner of the provided token account */
  owner?: PublicKey | Pda;
  /** The associated token account which may be the same as the token account */
  ata?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Token program */
  tokenProgram?: PublicKey | Pda;
  /** Associated Token program */
  ataProgram?: PublicKey | Pda;
};

// Data.
export type CreateTokenIfMissingInstructionData = { discriminator: number };

export type CreateTokenIfMissingInstructionDataArgs = {};

/** @deprecated Use `getCreateTokenIfMissingInstructionDataSerializer()` without any argument instead. */
export function getCreateTokenIfMissingInstructionDataSerializer(
  _context: object
): Serializer<
  CreateTokenIfMissingInstructionDataArgs,
  CreateTokenIfMissingInstructionData
>;
export function getCreateTokenIfMissingInstructionDataSerializer(): Serializer<
  CreateTokenIfMissingInstructionDataArgs,
  CreateTokenIfMissingInstructionData
>;
export function getCreateTokenIfMissingInstructionDataSerializer(
  _context: object = {}
): Serializer<
  CreateTokenIfMissingInstructionDataArgs,
  CreateTokenIfMissingInstructionData
> {
  return mapSerializer<
    CreateTokenIfMissingInstructionDataArgs,
    any,
    CreateTokenIfMissingInstructionData
  >(
    struct<CreateTokenIfMissingInstructionData>([['discriminator', u8()]], {
      description: 'CreateTokenIfMissingInstructionData',
    }),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<
    CreateTokenIfMissingInstructionDataArgs,
    CreateTokenIfMissingInstructionData
  >;
}

// Instruction.
export function createTokenIfMissing(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: CreateTokenIfMissingInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenExtras',
    'TokExjvjJmhKaRBShsBAsbSvEWMA1AgUNK7ps4SAc2p'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    mint: [input.mint, false] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'owner',
    input.owner
      ? ([input.owner, false] as const)
      : ([context.identity.publicKey, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ata',
    input.ata
      ? ([input.ata, true] as const)
      : ([
          findAssociatedTokenPda(context, {
            owner: publicKey(resolvedAccounts.owner[0], false),
            mint: publicKey(input.mint, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'token',
    input.token
      ? ([input.token, false] as const)
      : ([resolvedAccounts.ata[0], false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ataProgram',
    input.ataProgram
      ? ([input.ataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splAssociatedToken',
            'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
          ),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.token, false);
  addAccountMeta(keys, signers, resolvedAccounts.mint, false);
  addAccountMeta(keys, signers, resolvedAccounts.owner, false);
  addAccountMeta(keys, signers, resolvedAccounts.ata, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.ataProgram, false);

  // Data.
  const data = getCreateTokenIfMissingInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


