test/package/src/generated/instructions/setCollectionSize.ts
============================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  SetCollectionSizeArgs,
  SetCollectionSizeArgsArgs,
  getSetCollectionSizeArgsSerializer,
} from '../types';

// Accounts.
export type SetCollectionSizeInstructionAccounts = {
  /** Collection Metadata account */
  collectionMetadata: PublicKey | Pda;
  /** Collection Update authority */
  collectionAuthority: Signer;
  /** Mint of the Collection */
  collectionMint: PublicKey | Pda;
  /** Collection Authority Record PDA */
  collectionAuthorityRecord?: PublicKey | Pda;
};

// Data.
export type SetCollectionSizeInstructionData = {
  discriminator: number;
  setCollectionSizeArgs: SetCollectionSizeArgs;
};

export type SetCollectionSizeInstructionDataArgs = {
  setCollectionSizeArgs: SetCollectionSizeArgsArgs;
};

/** @deprecated Use `getSetCollectionSizeInstructionDataSerializer()` without any argument instead. */
export function getSetCollectionSizeInstructionDataSerializer(
  _context: object
): Serializer<
  SetCollectionSizeInstructionDataArgs,
  SetCollectionSizeInstructionData
>;
export function getSetCollectionSizeInstructionDataSerializer(): Serializer<
  SetCollectionSizeInstructionDataArgs,
  SetCollectionSizeInstructionData
>;
export function getSetCollectionSizeInstructionDataSerializer(
  _context: object = {}
): Serializer<
  SetCollectionSizeInstructionDataArgs,
  SetCollectionSizeInstructionData
> {
  return mapSerializer<
    SetCollectionSizeInstructionDataArgs,
    any,
    SetCollectionSizeInstructionData
  >(
    struct<SetCollectionSizeInstructionData>(
      [
        ['discriminator', u8()],
        ['setCollectionSizeArgs', getSetCollectionSizeArgsSerializer()],
      ],
      { description: 'SetCollectionSizeInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 34 })
  ) as Serializer<
    SetCollectionSizeInstructionDataArgs,
    SetCollectionSizeInstructionData
  >;
}

// Args.
export type SetCollectionSizeInstructionArgs =
  SetCollectionSizeInstructionDataArgs;

// Instruction.
export function setCollectionSize(
  context: Pick<Context, 'programs'>,
  input: SetCollectionSizeInstructionAccounts & SetCollectionSizeInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    collectionMetadata: [input.collectionMetadata, true] as const,
    collectionAuthority: [input.collectionAuthority, true] as const,
    collectionMint: [input.collectionMint, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'collectionAuthorityRecord',
    input.collectionAuthorityRecord
      ? ([input.collectionAuthorityRecord, false] as const)
      : ([programId, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionAuthorityRecord,
    false
  );

  // Data.
  const data =
    getSetCollectionSizeInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


