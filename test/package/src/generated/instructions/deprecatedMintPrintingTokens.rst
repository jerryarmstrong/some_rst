test/package/src/generated/instructions/deprecatedMintPrintingTokens.ts
=======================================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  MintPrintingTokensViaTokenArgs,
  MintPrintingTokensViaTokenArgsArgs,
  getMintPrintingTokensViaTokenArgsSerializer,
} from '../types';

// Accounts.
export type DeprecatedMintPrintingTokensInstructionAccounts = {
  /** Destination account */
  destination: PublicKey | Pda;
  /** Printing mint */
  printingMint: PublicKey | Pda;
  /** Update authority */
  updateAuthority: Signer;
  /** Metadata key (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey | Pda;
  /** Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition']) */
  masterEdition: PublicKey | Pda;
  /** Token program */
  tokenProgram?: PublicKey | Pda;
  /** Rent */
  rent?: PublicKey | Pda;
};

// Data.
export type DeprecatedMintPrintingTokensInstructionData = {
  discriminator: number;
  mintPrintingTokensViaTokenArgs: MintPrintingTokensViaTokenArgs;
};

export type DeprecatedMintPrintingTokensInstructionDataArgs = {
  mintPrintingTokensViaTokenArgs: MintPrintingTokensViaTokenArgsArgs;
};

/** @deprecated Use `getDeprecatedMintPrintingTokensInstructionDataSerializer()` without any argument instead. */
export function getDeprecatedMintPrintingTokensInstructionDataSerializer(
  _context: object
): Serializer<
  DeprecatedMintPrintingTokensInstructionDataArgs,
  DeprecatedMintPrintingTokensInstructionData
>;
export function getDeprecatedMintPrintingTokensInstructionDataSerializer(): Serializer<
  DeprecatedMintPrintingTokensInstructionDataArgs,
  DeprecatedMintPrintingTokensInstructionData
>;
export function getDeprecatedMintPrintingTokensInstructionDataSerializer(
  _context: object = {}
): Serializer<
  DeprecatedMintPrintingTokensInstructionDataArgs,
  DeprecatedMintPrintingTokensInstructionData
> {
  return mapSerializer<
    DeprecatedMintPrintingTokensInstructionDataArgs,
    any,
    DeprecatedMintPrintingTokensInstructionData
  >(
    struct<DeprecatedMintPrintingTokensInstructionData>(
      [
        ['discriminator', u8()],
        [
          'mintPrintingTokensViaTokenArgs',
          getMintPrintingTokensViaTokenArgsSerializer(),
        ],
      ],
      { description: 'DeprecatedMintPrintingTokensInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 9 })
  ) as Serializer<
    DeprecatedMintPrintingTokensInstructionDataArgs,
    DeprecatedMintPrintingTokensInstructionData
  >;
}

// Args.
export type DeprecatedMintPrintingTokensInstructionArgs =
  DeprecatedMintPrintingTokensInstructionDataArgs;

// Instruction.
export function deprecatedMintPrintingTokens(
  context: Pick<Context, 'programs'>,
  input: DeprecatedMintPrintingTokensInstructionAccounts &
    DeprecatedMintPrintingTokensInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    destination: [input.destination, true] as const,
    printingMint: [input.printingMint, true] as const,
    updateAuthority: [input.updateAuthority, false] as const,
    metadata: [input.metadata, false] as const,
    masterEdition: [input.masterEdition, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.destination, false);
  addAccountMeta(keys, signers, resolvedAccounts.printingMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.updateAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.metadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.masterEdition, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getDeprecatedMintPrintingTokensInstructionDataSerializer().serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}


