test/package/src/generated/accounts/candyMachine.ts
===================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataSerializer,
} from '../types';

/** Candy machine state and config data. */
export type CandyMachine = Account<CandyMachineAccountData>;

export type CandyMachineAccountData = {
  discriminator: Array<number>;
  /** Features versioning flags. */
  features: bigint;
  /** Authority address. */
  authority: PublicKey;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: PublicKey;
  /** The collection mint for the candy machine. */
  collectionMint: PublicKey;
  /** Number of assets redeemed. */
  itemsRedeemed: bigint;
  /** Candy machine configuration data. */
  data: CandyMachineData;
};

export type CandyMachineAccountDataArgs = {
  /** Features versioning flags. */
  features: number | bigint;
  /** Authority address. */
  authority: PublicKey;
  /** Authority address allowed to mint from the candy machine. */
  mintAuthority: PublicKey;
  /** The collection mint for the candy machine. */
  collectionMint: PublicKey;
  /** Number of assets redeemed. */
  itemsRedeemed: number | bigint;
  /** Candy machine configuration data. */
  data: CandyMachineDataArgs;
};

/** @deprecated Use `getCandyMachineAccountDataSerializer()` without any argument instead. */
export function getCandyMachineAccountDataSerializer(
  _context: object
): Serializer<CandyMachineAccountDataArgs, CandyMachineAccountData>;
export function getCandyMachineAccountDataSerializer(): Serializer<
  CandyMachineAccountDataArgs,
  CandyMachineAccountData
>;
export function getCandyMachineAccountDataSerializer(
  _context: object = {}
): Serializer<CandyMachineAccountDataArgs, CandyMachineAccountData> {
  return mapSerializer<
    CandyMachineAccountDataArgs,
    any,
    CandyMachineAccountData
  >(
    struct<CandyMachineAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['features', u64()],
        ['authority', publicKeySerializer()],
        ['mintAuthority', publicKeySerializer()],
        ['collectionMint', publicKeySerializer()],
        ['itemsRedeemed', u64()],
        ['data', getCandyMachineDataSerializer()],
      ],
      { description: 'CandyMachineAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [51, 173, 177, 113, 25, 241, 109, 189],
    })
  ) as Serializer<CandyMachineAccountDataArgs, CandyMachineAccountData>;
}

/** @deprecated Use `deserializeCandyMachine(rawAccount)` without any context instead. */
export function deserializeCandyMachine(
  context: object,
  rawAccount: RpcAccount
): CandyMachine;
export function deserializeCandyMachine(rawAccount: RpcAccount): CandyMachine;
export function deserializeCandyMachine(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): CandyMachine {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getCandyMachineAccountDataSerializer()
  );
}

export async function fetchCandyMachine(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<CandyMachine> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'CandyMachine');
  return deserializeCandyMachine(maybeAccount);
}

export async function safeFetchCandyMachine(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<CandyMachine | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeCandyMachine(maybeAccount) : null;
}

export async function fetchAllCandyMachine(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<CandyMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CandyMachine');
    return deserializeCandyMachine(maybeAccount);
  });
}

export async function safeFetchAllCandyMachine(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<CandyMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeCandyMachine(maybeAccount as RpcAccount));
}

export function getCandyMachineGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      features: number | bigint;
      authority: PublicKey;
      mintAuthority: PublicKey;
      collectionMint: PublicKey;
      itemsRedeemed: number | bigint;
      data: CandyMachineDataArgs;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      features: [8, u64()],
      authority: [16, publicKeySerializer()],
      mintAuthority: [48, publicKeySerializer()],
      collectionMint: [80, publicKeySerializer()],
      itemsRedeemed: [112, u64()],
      data: [120, getCandyMachineDataSerializer()],
    })
    .deserializeUsing<CandyMachine>((account) =>
      deserializeCandyMachine(account)
    )
    .whereField('discriminator', [51, 173, 177, 113, 25, 241, 109, 189]);
}


