test/package/src/generated/accounts/frequencyAccount.ts
=======================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { TaKey } from '../types';

export type FrequencyAccount = Account<FrequencyAccountAccountData>;

export type FrequencyAccountAccountData = {
  /** Test with only one line. */
  key: bigint;
  /**
   * Test with multiple lines
   * and this is the second line.
   */
  lastUpdate: bigint;
  period: bigint;
};

export type FrequencyAccountAccountDataArgs = {
  /**
   * Test with multiple lines
   * and this is the second line.
   */
  lastUpdate: number | bigint;
  period: number | bigint;
};

/** @deprecated Use `getFrequencyAccountAccountDataSerializer()` without any argument instead. */
export function getFrequencyAccountAccountDataSerializer(
  _context: object
): Serializer<FrequencyAccountAccountDataArgs, FrequencyAccountAccountData>;
export function getFrequencyAccountAccountDataSerializer(): Serializer<
  FrequencyAccountAccountDataArgs,
  FrequencyAccountAccountData
>;
export function getFrequencyAccountAccountDataSerializer(
  _context: object = {}
): Serializer<FrequencyAccountAccountDataArgs, FrequencyAccountAccountData> {
  return mapSerializer<
    FrequencyAccountAccountDataArgs,
    any,
    FrequencyAccountAccountData
  >(
    struct<FrequencyAccountAccountData>(
      [
        ['key', u64()],
        ['lastUpdate', i64()],
        ['period', i64()],
      ],
      { description: 'FrequencyAccountAccountData' }
    ),
    (value) => ({ ...value, key: TaKey.Frequency })
  ) as Serializer<FrequencyAccountAccountDataArgs, FrequencyAccountAccountData>;
}

/** @deprecated Use `deserializeFrequencyAccount(rawAccount)` without any context instead. */
export function deserializeFrequencyAccount(
  context: object,
  rawAccount: RpcAccount
): FrequencyAccount;
export function deserializeFrequencyAccount(
  rawAccount: RpcAccount
): FrequencyAccount;
export function deserializeFrequencyAccount(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): FrequencyAccount {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getFrequencyAccountAccountDataSerializer()
  );
}

export async function fetchFrequencyAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FrequencyAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'FrequencyAccount');
  return deserializeFrequencyAccount(maybeAccount);
}

export async function safeFetchFrequencyAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FrequencyAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeFrequencyAccount(maybeAccount) : null;
}

export async function fetchAllFrequencyAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FrequencyAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FrequencyAccount');
    return deserializeFrequencyAccount(maybeAccount);
  });
}

export async function safeFetchAllFrequencyAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FrequencyAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeFrequencyAccount(maybeAccount as RpcAccount)
    );
}

export function getFrequencyAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      key: number | bigint;
      lastUpdate: number | bigint;
      period: number | bigint;
    }>({ key: [0, u64()], lastUpdate: [8, i64()], period: [16, i64()] })
    .deserializeUsing<FrequencyAccount>((account) =>
      deserializeFrequencyAccount(account)
    )
    .whereField('key', TaKey.Frequency);
}

export function getFrequencyAccountSize(): number {
  return 24;
}

export function findFrequencyAccountPda(
  context: Pick<Context, 'eddsa' | 'programs'>
): Pda {
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('frequency_pda'),
    publicKeySerializer().serialize(programId),
  ]);
}

export async function fetchFrequencyAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<FrequencyAccount> {
  return fetchFrequencyAccount(
    context,
    findFrequencyAccountPda(context),
    options
  );
}

export async function safeFetchFrequencyAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<FrequencyAccount | null> {
  return safeFetchFrequencyAccount(
    context,
    findFrequencyAccountPda(context),
    options
  );
}


