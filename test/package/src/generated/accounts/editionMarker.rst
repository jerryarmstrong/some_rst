test/package/src/generated/accounts/editionMarker.ts
====================================================

Last edited: 2023-08-04 12:58:33

Contents:

.. code-block:: ts

    /**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { TmKey, TmKeyArgs, getTmKeySerializer } from '../types';

export type EditionMarker = Account<EditionMarkerAccountData>;

export type EditionMarkerAccountData = { key: TmKey; ledger: Array<number> };

export type EditionMarkerAccountDataArgs = { ledger: Array<number> };

/** @deprecated Use `getEditionMarkerAccountDataSerializer()` without any argument instead. */
export function getEditionMarkerAccountDataSerializer(
  _context: object
): Serializer<EditionMarkerAccountDataArgs, EditionMarkerAccountData>;
export function getEditionMarkerAccountDataSerializer(): Serializer<
  EditionMarkerAccountDataArgs,
  EditionMarkerAccountData
>;
export function getEditionMarkerAccountDataSerializer(
  _context: object = {}
): Serializer<EditionMarkerAccountDataArgs, EditionMarkerAccountData> {
  return mapSerializer<
    EditionMarkerAccountDataArgs,
    any,
    EditionMarkerAccountData
  >(
    struct<EditionMarkerAccountData>(
      [
        ['key', getTmKeySerializer()],
        ['ledger', array(u8(), { size: 31 })],
      ],
      { description: 'EditionMarkerAccountData' }
    ),
    (value) => ({ ...value, key: TmKey.EditionMarker })
  ) as Serializer<EditionMarkerAccountDataArgs, EditionMarkerAccountData>;
}

/** @deprecated Use `deserializeEditionMarker(rawAccount)` without any context instead. */
export function deserializeEditionMarker(
  context: object,
  rawAccount: RpcAccount
): EditionMarker;
export function deserializeEditionMarker(rawAccount: RpcAccount): EditionMarker;
export function deserializeEditionMarker(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): EditionMarker {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getEditionMarkerAccountDataSerializer()
  );
}

export async function fetchEditionMarker(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EditionMarker> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'EditionMarker');
  return deserializeEditionMarker(maybeAccount);
}

export async function safeFetchEditionMarker(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EditionMarker | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeEditionMarker(maybeAccount) : null;
}

export async function fetchAllEditionMarker(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EditionMarker[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'EditionMarker');
    return deserializeEditionMarker(maybeAccount);
  });
}

export async function safeFetchAllEditionMarker(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EditionMarker[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeEditionMarker(maybeAccount as RpcAccount)
    );
}

export function getEditionMarkerGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ key: TmKeyArgs; ledger: Array<number> }>({
      key: [0, getTmKeySerializer()],
      ledger: [1, array(u8(), { size: 31 })],
    })
    .deserializeUsing<EditionMarker>((account) =>
      deserializeEditionMarker(account)
    )
    .whereField('key', TmKey.EditionMarker);
}

export function getEditionMarkerSize(): number {
  return 32;
}


